# Nova Document Processor Pipeline Rules

# Core Pipeline Structure
pipeline:
  phases:
    - MARKDOWN_PARSE:
        description: "Parse markdown files using Microsoft markitdown"
        output_dir: "${NOVA_PHASE_MARKDOWN_PARSE}"
        processor: "MarkdownProcessor"
        components:
          - markdown_processor:
              parser: "markdown-it"
              config:
                typographer: true
                plugins:
                  - table
                  - strikethrough
                  - linkify
                  - image
          - image_processor:
              formats:
                - png
                - jpg/jpeg
                - gif
                - webp
                - heic/HEIC
              operations:
                - format conversion
                - size optimization
                - metadata extraction
                - description generation
          - office_processor:
              formats:
                - docx/doc
                - pptx/ppt
                - xlsx/xls
                - pdf
              operations:
                - text extraction
                - image extraction
                - metadata preservation

# Installation Requirements
installation:
  package_management:
    tool: "poetry"
    rules:
      - Never use pip directly
      - Always use poetry for dependencies
      - Keep pyproject.toml updated
      - Use poetry.lock for version control
  
  install_script:
    file: "install.sh"
    requirements:
      - Check Python installation
      - Install/verify poetry
      - Create .env file if missing
      - Set up directory structure
      - Install dependencies
      - Configure development environment (--dev)

# Execution Requirements
execution:
  entry_point: "consolidate.sh"
  requirements:
    - Load environment variables
    - Validate OpenAI key
    - Create required directories
    - Support command line options:
        --force, -f: Force processing
        --dry-run, -n: Show what would be done
        --show-state, -s: Display current state
        --scan: Show directory structure
        --help, -h: Show help message
    - Handle exit codes appropriately

# Directory Structure
directory_structure:
  base: "${NOVA_BASE_DIR}"
  required_dirs:
    input: "${NOVA_INPUT_DIR}"
    output: "${NOVA_OUTPUT_DIR}"
    processing: "${NOVA_PROCESSING_DIR}"
    temp: "${NOVA_TEMP_DIR}"
    src_resources: "${NOVA_SRC_RESOURCES_DIR}"
    phase_dirs:
      - markdown_parse: "${NOVA_PHASE_MARKDOWN_PARSE}"
    image_dirs:
      - original: "${NOVA_ORIGINAL_IMAGES_DIR}"
      - processed: "${NOVA_PROCESSED_IMAGES_DIR}"
      - metadata: "${NOVA_IMAGE_METADATA_DIR}"
      - cache: "${NOVA_IMAGE_CACHE_DIR}"
    office_dirs:
      - assets: "${NOVA_OFFICE_ASSETS_DIR}"
      - temp: "${NOVA_OFFICE_TEMP_DIR}"
  rules:
    - All paths from environment variables
    - No hardcoded paths
    - Shell script creates directories
    - Maintain proper permissions
    - src/resources is read-only for prompts

# State Management
state_tracking:
  implementation: "StateManager"
  storage: "${NOVA_PHASE_MARKDOWN_PARSE}/.state"
  tracked_data:
    - File hashes
    - Processing status
    - Modification times
    - Error states
  operations:
    - Track processed files
    - Detect changes
    - Handle incremental updates
    - Maintain processing state

# Caching Strategy
caching:
  openai:
    implementation: "ImageProcessor._load_from_cache"
    storage: "${NOVA_IMAGE_CACHE_DIR}"
    cache_key: "filename_mtime"
    tracked_data:
      - Image descriptions
      - Processing metadata
      - API response times
    invalidation:
      - Time-based expiration
      - Source file changes
      - Manual force refresh

# Console Output Standards
console_output:
  color_scheme:
    title: "bold blue"       # Section headers
    path: "cyan"             # File paths
    stats: "bold cyan"       # Statistics
    success: "green"         # Success messages
    warning: "yellow"        # Warnings
    error: "red"            # Errors
    info: "blue"            # Info messages
    highlight: "magenta"    # Important numbers
    detail: "dim white"     # Additional details
    cache: "cyan"           # Cache-related info
    progress: "green"       # Progress indicators
    skip: "yellow"          # Skipped items
  components:
    - Progress bars (tqdm)
    - Status updates
    - Error messages
    - Statistics display
    - Summary information

# Resource Management
resource_management:
  file_operations:
    - Use pathlib.Path for all paths
    - Handle file encodings (UTF-8)
    - Proper file closing
    - Error handling for I/O
  memory:
    - Image processing limits
    - Cache size management
    - Buffer management
  disk:
    - Clean temporary files
    - Manage cache size
    - Handle large files
    - Track space usage

# Error Handling
error_handling:
  retry_policy:
    max_retries: 3
    delay_between_retries: 1
    backoff_factor: 2
  error_types:
    - ProcessingError
    - FileConversionException
    - UnsupportedFormatException
  error_tolerance:
    allow_partial_success: true
    continue_on_non_critical: true
  cleanup:
    - Remove temporary files
    - Free resources
    - Log errors appropriately

# Phase 1 Output Format
phase_1_output:
  directory_structure:
    - processed_markdown/
        - Original directory structure preserved
        - Processed .md files
        - Image descriptions
    - images/
        - original/: Original images
        - processed/: Optimized images
        - metadata/: Image metadata
        - cache/: API responses
    - office/
        - assets/: Extracted assets
        - temp/: Temporary files
  file_formats:
    markdown:
      - UTF-8 encoded
      - GFM compatible
      - Image references updated
      - Metadata preserved
    images:
      - Optimized size
      - Converted format
      - Generated descriptions
      - Preserved metadata

# Source Resources
src_resources:
  location: "src/resources"
  purpose: "Store system prompts and templates"
  structure:
    - prompts/: System prompts for AI interactions
  rules:
    - Directory is read-only during processing
    - Changes require manual updates
    - Version control all prompts
    - Document any prompt modifications
    - No dynamic content generation
  access:
    read_only: true
    versioned: true
    documented: true
