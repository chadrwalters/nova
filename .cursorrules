# Nova Document Processor Pipeline Rules

# Core Pipeline Structure
pipeline:
  phases:
    - MARKDOWN_PARSE:
        description: "Parse and process markdown files with embedded content"
        output_dir: "${NOVA_PHASE_MARKDOWN_PARSE}"
        processor: "MarkdownProcessor"
        file_size_behavior: "Maintains original input file sizes"
        components:
          - markdown_processor:
              parser: "markdown-it"
              config:
                typographer: true
                plugins:
                  - table
                  - strikethrough
                  - linkify
                  - image
              handlers:
                - MarkitdownHandler:
                    document_conversion: true
                    image_processing: true
                    metadata_preservation: true
                - ConsolidationHandler:
                    sort_by_date: true
                    preserve_headers: true
          - image_processor:
              formats:
                - png
                - jpg/jpeg
                - gif
                - webp
                - heic/HEIC
              operations:
                - format_conversion:
                    heic_to_jpg: true
                    optimize_quality: 85
                - size_optimization:
                    preserve_aspect_ratio: true
                    max_dimensions: [1920, 1080]
                - metadata:
                    extract: true
                    preserve_original: true
                - description_generation:
                    use_openai: true
                    model: "gpt-4-vision-preview"
                    cache_results: true
              temp_files:
                use_stable_names: true
                cleanup_after_processing: true
                preserve_originals: true
          - office_processor:
              formats:
                - docx/doc:
                    extract_text: true
                    preserve_paragraphs: true
                - pptx/ppt:
                    extract_slides: true
                    include_notes: true
                - xlsx/xls:
                    table_format: true
                    preserve_headers: true
                - pdf:
                    extract_text: true
                    preserve_layout: true
                - csv:
                    detect_encoding: true
                    table_format: true
              operations:
                - text_extraction:
                    preserve_formatting: true
                    handle_unicode: true
                - image_extraction:
                    process_embedded: true
                    maintain_links: true
                - metadata:
                    preserve_all: true
                    track_changes: true
              content_extraction:
                try_attributes:
                  - text_content
                  - markdown
                  - text
                fallback_to_dict: true
                log_failures: true

    - MARKDOWN_CONSOLIDATE:
        description: "Consolidate markdown files with their attachments"
        output_dir: "${NOVA_PHASE_MARKDOWN_CONSOLIDATE}"
        processor: "MarkdownConsolidateProcessor"
        file_size_behavior: "Maintains individual file sizes while adding metadata and attachments"
        components:
          - consolidate_processor:
              config:
                group_by_root: true
                handle_attachments: true
                preserve_structure: true
              handlers:
                - AttachmentHandler:
                    copy_attachments: true
                    update_references: true
                - ContentHandler:
                    merge_content: true
                    preserve_headers: true

    - MARKDOWN_AGGREGATE:
        description: "Aggregate all consolidated markdown files into a single file"
        output_dir: "${NOVA_PHASE_MARKDOWN_AGGREGATE}"
        processor: "MarkdownAggregateProcessor"
        file_size_behavior: "Creates single output file with size approximately equal to sum of input files"
        components:
          - aggregate_processor:
              config:
                output_filename: "all_merged_markdown.md"
                include_file_headers: true
                add_separators: true
              handlers:
                - ContentHandler:
                    merge_files: true
                    preserve_structure: true
                    add_file_markers: true

    - MARKDOWN_SPLIT_THREEFILES:
        description: "Split aggregated markdown into summary, raw notes, and attachments"
        output_dir: "${NOVA_PHASE_MARKDOWN_SPLIT}"
        processor: "ThreeFileSplitProcessor"
        file_size_behavior: "Creates three output files with content-appropriate sizes"
        components:
          - split_processor:
              config:
                output_files:
                  summary: "summary.md"
                  raw_notes: "raw_notes.md"
                  attachments: "attachments.md"
                section_markers:
                  summary: "---SUMMARY---"
                  raw_notes: "---RAW NOTES---"
                  attachments: "---ATTACHMENTS---"
                cross_linking: true
                preserve_headers: true
              handlers:
                - ContentHandler:
                    split_content: true
                    add_navigation: true
                    maintain_links: true

# Installation Requirements
installation:
  package_management:
    tool: "poetry"
    rules:
      - Never use pip directly
      - Always use poetry for dependencies
      - Keep pyproject.toml updated
      - Use poetry.lock for version control
  
  install_script:
    file: "install.sh"
    requirements:
      - Check Python installation
      - Install/verify poetry
      - Create .env file if missing
      - Set up directory structure
      - Install dependencies

# Execution Requirements
execution:
  entry_point: "consolidate.sh"
  requirements:
    - Load environment variables
    - Validate OpenAI key
    - Create required directories for all phases. All setup for all phases shoudl be here
    - Support command line options:
        --force, -f: Force processing
        --dry-run, -n: Show what would be done
        --show-state, -s: Display current state
        --scan: Show directory structure
        --help, -h: Show help message
    - Handle exit codes appropriately

# Directory Structure
directory_structure:
  base: "${NOVA_BASE_DIR}"
  required_dirs:
    input: "${NOVA_INPUT_DIR}"
    output: "${NOVA_OUTPUT_DIR}"
    processing: "${NOVA_PROCESSING_DIR}"
    temp: "${NOVA_TEMP_DIR}"
    phase_dirs:
      - markdown_parse: "${NOVA_PHASE_MARKDOWN_PARSE}"
      - markdown_consolidate: "${NOVA_PHASE_MARKDOWN_CONSOLIDATE}"
      - markdown_aggregate: "${NOVA_PHASE_MARKDOWN_AGGREGATE}"
      - markdown_split: "${NOVA_PHASE_MARKDOWN_SPLIT}"
    image_dirs:
      - original: "${NOVA_ORIGINAL_IMAGES_DIR}"
      - processed: "${NOVA_PROCESSED_IMAGES_DIR}"
      - metadata: "${NOVA_IMAGE_METADATA_DIR}"
      - cache: "${NOVA_IMAGE_CACHE_DIR}"
    office_dirs:
      - assets: "${NOVA_OFFICE_ASSETS_DIR}"
      - temp: "${NOVA_OFFICE_TEMP_DIR}"
  rules:
    - All paths from environment variables
    - No hardcoded paths
    - Shell script creates directories
    - Maintain proper permissions

# State Management
state_tracking:
  implementation: "StateManager"
  storage: "${NOVA_PHASE_MARKDOWN_PARSE}/.state"
  tracked_data:
    - File hashes
    - Processing status
    - Modification times
    - Error states
    - Image cache status
    - API usage metrics
    - Conversion history
  operations:
    - Track processed files
    - Detect changes
    - Handle incremental updates
    - Maintain processing state
    - Monitor API limits
    - Cache management

# Temporary File Management
temp_file_handling:
  rules:
    - Use stable, predictable names
    - Track created temp files
    - Clean up after processing
    - Don't delete originals
    - Log cleanup operations
  locations:
    - temp_dir: "${NOVA_TEMP_DIR}"
    - office_temp: "${NOVA_OFFICE_TEMP_DIR}"
  cleanup:
    - timing: after_processing
    - scope: only_temp_files
    - logging: debug_level

# Caching Strategy
caching:
  openai:
    implementation: "ImageProcessor._load_from_cache"
    storage: "${NOVA_IMAGE_CACHE_DIR}"
    cache_key: "filename_mtime"
    tracked_data:
      - Image descriptions
      - Processing metadata
      - API response times
      - Vision model responses
      - Error states
    invalidation:
      - Time-based expiration
      - Source file changes
      - Manual force refresh
      - Model version changes

# Console Output Standards
console_output:
  color_scheme:
    title: "bold blue"       # Section headers
    path: "cyan"             # File paths
    stats: "bold cyan"       # Statistics
    success: "green"         # Success messages
    warning: "yellow"        # Warnings
    error: "red"            # Errors
    info: "blue"            # Info messages
    highlight: "magenta"    # Important numbers
    detail: "dim white"     # Additional details
    cache: "cyan"           # Cache-related info
    progress: "green"       # Progress indicators
    skip: "yellow"          # Skipped items
  components:
    - Progress bars (tqdm)
    - Status updates
    - Error messages
    - Statistics display
    - Summary information

# Resource Management
resource_management:
  file_operations:
    - Use pathlib.Path for all paths
    - Handle file encodings (UTF-8)
    - Proper file closing
    - Error handling for I/O
  memory:
    - Image processing limits
    - Cache size management
    - Buffer management
  disk:
    - Clean temporary files
    - Manage cache size
    - Handle large files
    - Track space usage

# Error Handling
error_handling:
  retry_policy:
    max_retries: 3
    delay_between_retries: 1
    backoff_factor: 2
  error_types:
    - ProcessingError:
        recoverable: true
        retry: true
    - FileConversionException:
        recoverable: true
        fallback: true
    - UnsupportedFormatException:
        recoverable: false
        log_only: true
    - OpenAIError:
        recoverable: true
        retry: true
        backoff: true
    - ConfigurationError:
        recoverable: false
        halt: true
  error_tolerance:
    allow_partial_success: true
    continue_on_non_critical: true
    log_all_errors: true
    track_error_counts: true
  cleanup:
    - Remove temporary files
    - Free resources
    - Log errors appropriately
    - Update state tracking
    - Preserve error context

# Phase 1 Output Format
phase_1_output:
  directory_structure:
    - processed_markdown/
        - Original directory structure preserved
        - Processed .md files with embedded content
        - Attachment directories maintained
        - Image descriptions and metadata
    - images/
        - original/: Original images (all formats)
        - processed/: Optimized images (standard formats)
        - metadata/: 
            - Image technical metadata
            - AI-generated descriptions
            - Processing history
        - cache/: 
            - OpenAI API responses
            - Vision model results
            - Processing metrics
    - office/
        - assets/: 
            - Extracted images and media
            - Document resources
        - temp/: 
            - Conversion workspace
            - Processing artifacts
  file_formats:
    markdown:
      - UTF-8 encoded
      - GFM compatible
      - Image references updated
      - Metadata preserved
      - Embedded content converted
      - Links maintained
    images:
      - Optimized size and quality
      - Standard formats (jpg/png)
      - Generated descriptions
      - Preserved metadata
      - Processing history
    documents:
      - Converted to markdown
      - Formatting preserved
      - Tables properly formatted
      - Images extracted and linked
      - Metadata maintained

# Multi-Step Impl
implementation_protocol:
  task_tracking:
    requirements:
      - Maintain master task list between conversations
      - Each task must have clear description and success criteria
      - Track progress numerically
      - Preserve context between messages
    
    task_list_format:
      - ID: Hierarchical numbering (e.g., 1.1, 1.2, 2.1)
      - Description: Clear, actionable description
      - Status: [TODO/IN_PROGRESS/DONE]
      - Dependencies: List of prerequisite tasks
    
    message_structure:
      start:
        - State current task ID and description
        - Indicate progress (e.g., "Step 3 of 10")
        - Explain implementation goals
        - Reference relevant context/dependencies
      
      end:
        - Confirm task completion
        - Show progress update
        - Preview next task with context
        - Request confirmation to proceed
    
    progress_tracking:
      - Track completion percentage
      - Note dependencies
      - Maintain task state between conversations
      - Allow for task list updates/modifications

  communication_rules:
    - Always reference current task context
    - Maintain numbered task list state
    - Show clear progress indicators
    - Preview upcoming work
    - Request explicit confirmation before proceeding 

# File Size Management
file_size_management:
  rules:
    - Preserve original file sizes through parsing phase
    - Maintain individual file integrity during consolidation
    - Aggregate phase output size should approximate sum of inputs
    - No artificial file size inflation
    - Log warnings for unexpected size changes
  monitoring:
    - Track file sizes between phases
    - Compare input/output ratios
    - Alert on anomalous growth
    - Log size statistics
  optimization:
    - Compress images when possible
    - Optimize text content
    - Remove duplicate content
    - Clean temporary data
    - Preserve essential metadata only