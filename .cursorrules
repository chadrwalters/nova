You are assisting in developing a Python CLI tool for markdown file consolidation and PDF generation.

Project Context:
- Python CLI application using Click, Pillow, and markdown processing libraries
- Target Python version: 3.11+
- Primary focus on clean code and efficient processing
- Follows PEP 8 style guide with specific modifications
- Uses modern Python features (match/case, TypeAlias, etc.)

Code Organization:
- src/
  - core/ (main processing logic)
  - utils/ (helper functions)
  - cli/ (command line interface)
  - processors/ (markdown and image processors)
  - models/ (data models and types)
  - config/ (configuration management)
  - resources/ (templates, styles, prompts)
  - exceptions/ (custom exception classes)
  - tests/ (test files and fixtures)

Development Environment:
- Use poetry for dependency management
- Maintain .env files for environment variables
- Include pre-commit hooks for code quality
- Use pytest for testing framework

Coding Standards:
1. Use type hints consistently with typing module
2. Implement error handling with custom exceptions
3. Document all public functions with docstrings (Google style)
4. Use dataclasses and Pydantic models for data validation
5. Implement async processing for I/O operations
6. Use pathlib for file path operations
7. Implement logging with structlog

Architecture Patterns:
- Factory pattern for file processors
- Strategy pattern for different input types
- Observer pattern for progress tracking
- Builder pattern for output generation
- Repository pattern for data access
- Dependency injection for better testability

Error Handling:
- Create custom exceptions for each error type
- Log all errors with appropriate context
- Implement graceful degradation for non-critical failures
- Include error recovery mechanisms
- Provide user-friendly error messages

Performance Guidelines:
- Use generators for large file processing
- Implement parallel processing with asyncio
- Stream large files instead of loading into memory
- Cache processed images based on hash
- Use connection pooling for external services
- Implement rate limiting where necessary

Testing Requirements:
- Unit tests for all core functions (min 80% coverage)
- Integration tests for file processing flows
- Property-based testing for file handling
- Mock external dependencies
- Performance benchmarks
- Security testing
- API testing where applicable

Documentation:
- Include type hints and docstrings
- Add inline comments for complex logic
- Maintain a CHANGELOG.md
- Update README.md with usage examples
- Include API documentation
- Document configuration options
- Maintain architecture decision records (ADRs)

Naming Conventions:
- Use snake_case for functions and variables
- Use PascalCase for classes
- Use UPPER_CASE for constants
- Prefix private methods with underscore
- Use descriptive names that reflect purpose

Code Structure:
- Maximum function length: 50 lines
- Maximum file length: 500 lines
- Maximum line length: 88 characters (black formatter)
- Use absolute imports
- Group imports according to isort standards
- Separate concerns into appropriate modules

Optimization Focus:
- Memory efficiency in file processing
- CPU optimization for image processing
- Minimal disk I/O operations
- Efficient string concatenation
- Database query optimization
- Resource cleanup and management

Security Considerations:
- Validate all file paths
- Sanitize markdown content
- Handle symlinks safely
- Implement file access checks
- Secure handling of environment variables
- Input validation and sanitization
- OWASP security guidelines compliance
- Regular dependency security updates

CI/CD Requirements:
- Automated testing on push
- Code quality checks
- Security scanning
- Automated deployment
- Version tagging
- Release automation

Monitoring and Logging:
- Structured logging
- Performance metrics
- Error tracking
- Usage analytics
- Health checks
- Resource monitoring

Remember:
- Focus on maintainability and readability
- Implement robust error handling
- Optimize for performance where critical
- Follow Python best practices
- Consider backwards compatibility
- Document breaking changes

Code Quality Rules for LLM:
1. Always use pathlib.Path for file operations, never os.path
2. Always use f-strings for string formatting, never % or .format()
3. Always use async/await for I/O operations
4. Always use TypedDict for dictionary type hints
5. Always use Enum for constants with related values
6. Always use dataclasses for data containers
7. Always implement __str__ and __repr__ for custom classes
8. Always use contextlib.contextmanager for resource management
9. Always use structlog for logging
10. Always use click.Path for CLI file parameters

Function Rules:
1. Maximum function complexity: 10 (McCabe)
2. Maximum function arguments: 8
3. Maximum function returns: 5
4. Maximum function local variables: 15
5. Always type hint all parameters and return values
6. Always validate input parameters
7. Always handle edge cases explicitly
8. Always use early returns for guard clauses
9. Always document exceptions that may be raised
10. Always use keyword-only arguments for optional parameters

Error Handling Rules:
1. Always use custom exceptions for domain-specific errors
2. Always include context in exception messages
3. Always clean up resources in finally blocks
4. Always use contextlib.suppress for specific exceptions
5. Always log exceptions with traceback
6. Always validate file operations before execution
7. Always handle timeout scenarios
8. Always provide user-friendly error messages
9. Always implement rollback mechanisms for critical operations
10. Always validate input data before processing

Testing Rules:
1. Always write parametrized tests for edge cases
2. Always mock external dependencies
3. Always use fixtures for test data
4. Always test exception scenarios
5. Always test async code with pytest.mark.asyncio
6. Always use property-based testing for data validation
7. Always test timeout scenarios
8. Always test concurrent operations
9. Always include integration tests
10. Always test error recovery mechanisms

Security Rules:
1. Always validate file paths against directory traversal
2. Always sanitize markdown input
3. Always use secure random for sensitive operations
4. Always validate image files before processing
5. Always use constant time comparisons for sensitive data
6. Always handle temporary files securely
7. Always validate URLs before processing
8. Always use proper file permissions
9. Always sanitize file names
10. Always validate environment variables

Performance Rules:
1. Always use generators for large datasets
2. Always implement proper cleanup in __exit__
3. Always use connection pooling
4. Always implement proper caching
5. Always use bulk operations where possible
6. Always implement rate limiting
7. Always use streaming for large files
8. Always implement proper pagination
9. Always use proper indexing
10. Always implement proper batching
