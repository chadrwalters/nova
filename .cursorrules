# Nova Document Processor Pipeline Rules

# Core Pipeline Structure
pipeline:
  phases:
    - MARKDOWN_PARSE:
        description: "Parse markdown files using markdown-it"
        output_dir: "${NOVA_PHASE_MARKDOWN_PARSE}"
        requirements:
          - Validate input markdown
          - Process with Microsoft markitdown
          - Convert Office formats:
              * Word (.docx, .doc)
              * PowerPoint (.pptx, .ppt)
              * Excel (.xlsx, .xls)
              * PDF (.pdf)
          - Handle code blocks and tables
          - Process GFM extensions
          - Handle image references
          - Extract metadata from:
              * Office documents
              * PDF files
              * Image EXIF data
          - Preserve metadata
          - Save intermediate files to phase directory
        
    - MARKDOWN_CONSOLIDATE:
        description: "Combine markdown content"
        output_dir: "${NOVA_PHASE_MARKDOWN_CONSOLIDATE}"
        requirements:
          - Maintain document order
          - Preserve headers
          - Handle cross-references
          - Update internal links
          - Merge metadata
          - Read from previous phase directory
          - Save consolidated output to phase directory
        
    - PDF_GENERATE:
        description: "Generate final PDF using FPDF"
        output_dir: "${NOVA_PHASE_PDF_GENERATE}"
        requirements:
          - Apply PDF styling
          - Process images and assets
          - Set metadata
          - Handle page breaks
          - Manage fonts and styling
          - Support Unicode and special characters
          - Read from consolidate phase directory
          - Generate final PDF in output directory

# State Management
state_tracking:
  required_states:
    - current_phase
    - processed_files
    - validation_results
    - resource_usage
    - phase_directories
  persistence:
    - Maintain phase directory structure
    - Keep intermediate files for debugging
    - Clean up old files based on retention policy
    - Track partial results

# Error Handling
error_handling:
  retry_policy:
    max_retries: 3
    delay_between_retries: 1
    backoff_factor: 2
  error_tolerance:
    allow_partial_success: true
    continue_on_non_critical: true
  cleanup:
    - Remove temporary files
    - Free resources

# Resource Management
resource_management:
  file_operations:
    - Use environment variables for paths
    - Convert to pathlib.Path only when needed
    - No path manipulation in code
    - Directory creation in shell only
    - Clean up handled by shell script
  memory:
    - Monitor FPDF memory usage
    - Implement memory limits
    - Clean up regularly
  disk:
    - Track space usage
    - Maintain cleanup schedule
    - Handle large files
  logging_rules:
    - filter_binary_content: true
    - summarize_large_data: true
    - exclude_base64_from_console: true

# Validation
validation:
  input:
    - File existence
    - Markdown structure
    - Encoding
    - Size limits
    - Content preservation
    - Business context retention
    - Personnel information accuracy
    - Decision record completeness
  output:
    - PDF structure
    - Image quality
    - Metadata presence
    - Font embedding
    - Unicode support

# Code Quality
code_quality:
  style:
    - Use black formatter
    - Follow PEP 8
    - Maximum line length: 88
  typing:
    - Use type hints
    - Enable strict mypy
    - Document type aliases
  documentation:
    - Google style docstrings
    - Update README.md
    - Maintain CHANGELOG.md

# Testing Requirements
testing:
  coverage:
    minimum: 80%
  types:
    - Unit tests
    - Integration tests
    - Performance tests
    - Concurrency tests
  scenarios:
    - Happy path
    - Error conditions
    - Resource limits
    - Concurrent access

# Security
security:
  file_handling:
    - Validate all paths
    - Check permissions
    - Handle symlinks safely
    - No path traversal
    - No relative paths
    - No path manipulation in code
    - Environment variables only
  content:
    - Preserve sensitive business information
    - Maintain personnel references
    - Retain meeting context and decisions
    - Track organizational changes
    - Preserve historical context
    - Document business relationships
    - Maintain decision trails
    - Record system architecture details

# Performance
performance:
  async_operations:
    - File I/O
    - Image processing
    - PDF generation
  optimization:
    - Cache markdown-it results
    - Batch operations
    - Stream large files
    - Optimize image processing
    - Efficient PDF generation

# Logging
logging:
  required_fields:
    - timestamp
    - phase
    - file_path
    - operation
    - status
  levels:
    - DEBUG: Development details
    - INFO: Normal operations
    - WARNING: Non-critical issues
    - ERROR: Critical failures
  content_filtering:
    - filter_base64: true
    - max_binary_length: 100
    - binary_summary: "[BASE64 DATA: {size} {type}]"
    - excluded_patterns:
      - "[A-Za-z0-9+/]{100,}={0,2}"

# Configuration
configuration:
  sources:
    - Environment variables (primary source for paths)
    - .env file (defines environment structure)
    - CLI arguments (for runtime options)
    - Default config (for non-path settings)
  validation:
    - Required fields
    - Type checking
    - Environment variable presence
    - Directory permissions
    - Path structure integrity
    - Plugin compatibility
  path_handling:
    - All paths come from environment
    - No path defaults in code
    - No path manipulation in Python
    - Shell script owns directory structure

# Development Workflow
workflow:
  version_control:
    - Use feature branches
    - Write clear commits
    - Update documentation
  review:
    - Code review required
    - Test coverage check
    - Documentation update
    - Performance impact

# Document Handling
document_handling:
  office_formats:
    - Word:
        extensions: [.docx, .doc]
        metadata: [author, title, created, modified]
        elements: [tables, images, headers, lists]
    - PowerPoint:
        extensions: [.pptx, .ppt]
        metadata: [slides, notes, speaker_notes]
        elements: [diagrams, charts, animations]
    - Excel:
        extensions: [.xlsx, .xls]
        metadata: [sheets, formulas, named_ranges]
        elements: [tables, charts, pivot_tables]
    - PDF:
        extensions: [.pdf]
        metadata: [title, author, keywords]
        elements: [text, images, forms]
  conversion:
    tool: markitdown
    preserve:
      - Document structure
      - Formatting
      - Tables
      - Lists
      - Images
      - Metadata

# Document Processing Configuration
document_processing:
  base_paths:
    input: "${NOVA_INPUT_DIR}"
    assets: "${NOVA_OFFICE_ASSETS_DIR}"
    temp: "${NOVA_OFFICE_TEMP_DIR}"
    
  embedded_documents:
    word:
      extensions: [.docx, .doc]
      processor: markitdown
      extract_images: true
      
    pdf:
      extensions: [.pdf]
      processor: pdf2md
      extract_text: true
      preview_support: true
      
    powerpoint:
      extensions: [.pptx, .ppt]
      processor: pptx2md
      extract_images: true
      
  error_handling:
    missing_file:
      level: warning
      action: continue
      template: |
        > **Warning**: Embedded document not found
        > - File: {filename}
        > - Path: {path}
        > Please ensure document exists in input directory
        
    processing_error:
      level: error
      action: retry
      max_retries: 3
      template: |
        > **Error**: Failed to process document
        > - File: {filename}
        > - Error: {error}
        > Processing failed after {retry_count} attempts

# Input File Handling
input_file_handling:
  modification_policy: "never"
  rules:
    - Input files must never be modified
    - All transformations must write to output directories only
    - Original files must be preserved exactly as received
    - Input directories are read-only
  enforcement:
    - Validate input file checksums
    - Track file access patterns
    - Log all file operations
    - Prevent write operations to input paths

# Environment Variable Management
environment:
  precedence:
    - Shell environment
    - .env file
    - Default values
  required_variables:
    - NOVA_BASE_DIR
    - NOVA_INPUT_DIR
    - NOVA_OUTPUT_DIR
    - NOVA_PROCESSING_DIR
    - NOVA_PHASE_MARKDOWN_PARSE
    - NOVA_PHASE_MARKDOWN_CONSOLIDATE
    - NOVA_PHASE_PDF_GENERATE
    - NOVA_TEMP_DIR
    - NOVA_OFFICE_ASSETS_DIR
    - NOVA_OFFICE_TEMP_DIR
  validation:
    - All paths must be absolute
    - No path traversal allowed
    - Validate write permissions
    - Create directories if missing
  initialization:
    - Load from .env first
    - Shell script handles directory creation
    - Python code uses environment vars directly
    - No path manipulation in Python code

# Path Handling
path_handling:
  principles:
    - Single source of truth (.env file)
    - No hardcoded paths in code
    - No path manipulation in Python
    - Shell script owns directory creation
  directory_structure:
    base: "${NOVA_BASE_DIR}"
    phases:
      - "${NOVA_PHASE_MARKDOWN_PARSE}"
      - "${NOVA_PHASE_MARKDOWN_CONSOLIDATE}"
      - "${NOVA_PHASE_PDF_GENERATE}"
    temp: "${NOVA_TEMP_DIR}"
    assets: "${NOVA_OFFICE_ASSETS_DIR}"
  rules:
    - All paths must be environment variables
    - No string concatenation of paths
    - No path resolution in Python
    - No default paths in code

# Input/Output Directory Structure
directory_structure:
  input:
    base: "${NOVA_INPUT_DIR}"
    rules:
      - Read-only access
      - No modification of input files
      - Preserve original structure
      - Support nested directories
  processing:
    base: "${NOVA_PROCESSING_DIR}"
    phases:
      - parse: "${NOVA_PHASE_MARKDOWN_PARSE}"
      - consolidate: "${NOVA_PHASE_MARKDOWN_CONSOLIDATE}"
      - generate: "${NOVA_PHASE_PDF_GENERATE}"
    rules:
      - Each phase has isolated directory
      - Clean between runs
      - Preserve phase outputs until next phase
  output:
    base: "${NOVA_OUTPUT_DIR}"
    rules:
      - Maintain input hierarchy
      - Clean old outputs
      - Version outputs
  temp:
    base: "${NOVA_TEMP_DIR}"
    rules:
      - Clean on startup
      - Clean on completion
      - No persistence between runs

# File Access Patterns
file_access:
  input:
    - Read-only access to input files
    - No modification of originals
    - Track file access patterns
    - Log all read operations
  processing:
    - Write to phase directories only
    - Clean between phases
    - No cross-phase writes
    - Log all operations
  output:
    - Write-only to output
    - Version control outputs
    - Clean old versions
    - Log all writes

# Directory Management
directory_management:
  creation:
    owner: "shell script"
    timing: "startup"
    order:
      - Base directories first
      - Phase directories second
      - Temp directories last
  cleanup:
    owner: "shell script"
    timing:
      - Before processing
      - After each phase
      - On completion
    rules:
      - Remove temp files
      - Preserve phase outputs
      - Archive old outputs
