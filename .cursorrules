# Nova Project Rules

documentation:
    docling: docling-docs
    raycast: raycast-docs
    mcp: mcp-docs

package_management:
    - Use uv ONLY
    - Direct pip usage is FORBIDDEN
    - Direct python/python3 usage is FORBIDDEN
    - All Python commands must go through uv

vision_model:
    - Use "gpt-4o" model for vision recognition
    - Do NOT use gpt-4-vision-preview or any other vision models

file_system:
    - All system files MUST be stored in .nova directory
    - All logs, processing files, and system writes go to .nova
    - Input files location must be configurable
    - Default input path: /Users/chadwalters/Library/Mobile Documents/com~apple~CloudDocs/_NovaInput

file_size:
    - All code files MUST be less then 250 lines

testing:
    - Use uv run pytest for ALL test runs
    - Tests should run without approval
    - Test command: uv run pytest -v
    - Type checking MUST be run before tests

cli_commands:
    base_command: "uv run python -m nova.cli"

    process_notes:
        command: "process-notes"
        options:
            - "--input-dir: Input directory path (required)"
            - "--output-dir: Output directory path (optional, defaults to .nova/processing)"
        rules:
            - "Input directory must exist"
            - "Output directory will be created if needed"
            - "Supports multiple document formats"
            - "Preserves metadata and structure"

    process_bear_vectors:
        command: "process-bear-vectors"
        options:
            - "--input-dir: Input directory path (required)"
            - "--output-dir: Output directory path (optional, defaults to .nova/vectors)"
        rules:
            - "Input directory must contain Bear notes"
            - "Output directory will be created if needed"
            - "Preserves Bear metadata and tags"

    clean_processing:
        command: "clean-processing"
        options:
            - "--force: Required to actually perform deletion"
        rules:
            - "Must use --force flag to delete"
            - "Cannot be undone"
            - "Verifies directory exists before attempting cleanup"

    clean_vectors:
        command: "clean-vectors"
        options:
            - "--force: Required to actually perform deletion"
        rules:
            - "Must use --force flag to delete"
            - "Cannot be undone"
            - "Verifies vector store exists before attempting cleanup"

    monitor:
        command: "monitor"
        subcommands:
            health:
                description: "Check system component status"
                rules:
                    - "Verifies all required directories exist"
                    - "Checks component accessibility"
            stats:
                description: "Display system statistics"
                rules:
                    - "Shows vector store metrics"
                    - "Shows processing metrics"
                    - "Shows log statistics"
            logs:
                description: "View system logs"
                rules:
                    - "Shows recent log entries"
                    - "Filters by component"
                    - "Highlights errors and warnings"

    search:
        command: "search"
        options:
            - "--query: Search query (required)"
            - "--vector-dir: Vector store directory (optional, defaults to .nova/vectors)"
            - "--limit: Maximum results to return (optional, defaults to 5)"
        rules:
            - "Vector store must exist"
            - "Returns similarity scores (0-100%)"
            - "Includes metadata in results"
            - "Shows content previews"

ai_commands:
    update_docs:
        procedure:
            - "Parse all Markdown files in docs/**/*.md and README.md"
            - "Extract relevant updates from conversation"
            - "Apply any relevant and useful updates"

    create_plan:
        procedure:
            - "If there is a plan, you MUST delete it"
            - "Create a new plan in .Plan in cursorplan format"
            - "You must include status markers for each step, along with milestones where we should run and get the tests to work"
            - "Extract relevant updates from conversation"
            - "Apply any relevant and useful parts of conversation to the plan"

    update_plan:
        procedure:
            - "You must read the plan in .Plan"
            - "Extract relevant updates from conversation and make appropriate changes to the plan"
            - "You must update status markers for each step, along with milestones where we should run and get the tests to work"
            - "Apply any relevant and useful parts of conversation to the plan"

    update_rules:
        procedure:
            - "Parse .cursorrules file"
            - "Extract rule updates from conversation"
            - "Apply any relevant and useful updates"

    update_scratchpad:
        procedure:
            - "You MUST read the .cursorscratchpad file"
            - "Extract relevant insights from current context"
            - "Interleave your thoughts with previous thoughts in the <SCRATCHPAD> buffer"
            - "You MUST write your thoughts in the <SCRATCHPAD> buffer"
            - "Consolidate your thoughts as necessary, grouping related thoughts together"

    update_note:
        procedure:
            - "You MUST read the .cursornotes and .cursorscratchpad files"
            - "Consolidate previous thoughts from <SCRATCHPAD>"
            - "Integrate new information from current conversation"
            - "Format as dated entry, request date from user"
            - "Append to .cursornotes file"
            - "Clear <SCRATCHPAD> section in .cursorscratchpad"

    run_tests:
        procedure:
            - "Run command: uv run pytest -v"
