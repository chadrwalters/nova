# Nova Document Processor Pipeline Rules

# Core Pipeline Structure
pipeline:
  phases:
    - HTML_INDIVIDUAL:
        description: "Convert individual markdown files to HTML"
        requirements:
          - Validate input markdown
          - Process embedded content
          - Handle image references
          - Generate individual HTML
          - Preserve metadata
        
    - MARKDOWN_CONSOLIDATED:
        description: "Combine markdown files"
        requirements:
          - Maintain document order
          - Preserve headers
          - Handle cross-references
          - Update internal links
        
    - HTML_CONSOLIDATED:
        description: "Generate consolidated HTML"
        requirements:
          - Apply HTML template
          - Process consolidated markdown
          - Handle resource paths
          - Update internal references
          
    - PDF:
        description: "Generate final PDF"
        requirements:
          - Apply PDF template
          - Process images
          - Set metadata
          - NO HEADERS OR FOOTERS: Headers and footers in wkhtmltopdf are explicitly forbidden due to:
              * Increased complexity and failure rates with separate HTML context
              * Resource constraints with complex documents and many images
              * Unreliable rendering in multi-page documents
              * Memory management issues during rendering passes

# State Management
state_tracking:
  required_states:
    - current_phase
    - processed_files
    - validation_results
    - resource_usage
    - error_states
  persistence:
    - Use checkpoints for recovery
    - Maintain processing history
    - Track partial results

# Error Handling
error_handling:
  retry_policy:
    max_retries: 3
    delay_between_retries: 1
    backoff_factor: 2
  error_tolerance:
    allow_partial_success: true
    continue_on_non_critical: true
  cleanup:
    - Remove temporary files
    - Release locks
    - Free resources

# Resource Management
resource_management:
  file_operations:
    - Use pathlib.Path exclusively
    - Implement proper locking
    - Clean up temporary files
  memory:
    - Monitor usage
    - Implement limits
    - Clean up regularly
  disk:
    - Track space usage
    - Maintain cleanup schedule
    - Handle large files
  logging_rules:
    - filter_binary_content: true
    - summarize_large_data: true
    - exclude_base64_from_console: true

# Validation
validation:
  input:
    - File existence
    - Markdown structure
    - Encoding
    - Size limits
    - Content safety
  output:
    - HTML validity
    - PDF structure
    - Image quality
    - Metadata presence

# Code Quality
code_quality:
  style:
    - Use black formatter
    - Follow PEP 8
    - Maximum line length: 88
  typing:
    - Use type hints
    - Enable strict mypy
    - Document type aliases
  documentation:
    - Google style docstrings
    - Update README.md
    - Maintain CHANGELOG.md

# Testing Requirements
testing:
  coverage:
    minimum: 80%
  types:
    - Unit tests
    - Integration tests
    - Performance tests
    - Concurrency tests
  scenarios:
    - Happy path
    - Error conditions
    - Resource limits
    - Concurrent access

# Security
security:
  file_handling:
    - Validate all paths
    - Check permissions
    - Handle symlinks safely
  content:
    - Sanitize markdown
    - Validate external refs
    - Check embedded content

# Performance
performance:
  async_operations:
    - File I/O
    - Network requests
    - Image processing
  optimization:
    - Cache results
    - Batch operations
    - Stream large files

# Logging
logging:
  required_fields:
    - timestamp
    - phase
    - file_path
    - operation
    - status
  levels:
    - DEBUG: Development details
    - INFO: Normal operations
    - WARNING: Non-critical issues
    - ERROR: Critical failures
  content_filtering:
    - filter_base64: true
    - max_binary_length: 100
    - binary_summary: "[BASE64 DATA: {size} {type}]"
    - excluded_patterns:
      - "[A-Za-z0-9+/]{100,}={0,2}"

# Configuration
configuration:
  sources:
    - Environment variables
    - .env file
    - CLI arguments
    - Default config
  validation:
    - Required fields
    - Type checking
    - Path existence
    - Value ranges

# Development Workflow
workflow:
  version_control:
    - Use feature branches
    - Write clear commits
    - Update documentation
  review:
    - Code review required
    - Test coverage check
    - Documentation update
    - Performance impact
