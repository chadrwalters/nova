# Nova Project Rules

1. Package Management
   - Use Poetry ONLY
   - Direct pip usage is FORBIDDEN

2. Vision Model
   - Use "gpt-4o" model for vision recognition
   - Do NOT use gpt-4-vision-preview or any other vision models

3. AI Commands
When I submit a command to you, you MUST follow the procedure outlined in the command.

- "update docs":
    - procedure:
        1. "Parse all Markdown files in docs/**/*.md and README.md"
        2. "Extract relevant updates from conversation"
        3. "Apply any relevant and useful updates"

- "create plan":
    - procedure:
        1. "If there is a plan, you MUST delete it"
        2. "Create a new plan in .Plan in cursorplan format"
        3. "You must include status markers for each step, along with milestones where we should run and get the tests to work"
        4. "Extract relevant updates from conversation"
        5. "Apply any relevant and useful parts of conversation to the plan"

- "update plan":
    - procedure:
        1. "You must read the plan in .Plan"
        2. "Extract relevant updates from conversation and make appropriate changes to the plan"
        3. "You must update status markers for each step, along with milestones where we should run and get the tests to work"
        4. "Apply any relevant and useful parts of conversation to the plan"

- "update rules":
    - procedure:
        1. "Parse .cursorrules file"
        2. "Extract rule updates from conversation"
        3. "Apply any relevant and useful updates"

- "update thoughts":
    - procedure:
        1. "You MUST read the .cursorscratchpad file"
        2. "Extract relevant insights from current context"
        3. "Interleave your thoughts with previous thoughts in the <SCRATCHPAD> buffer"
        4. "You MUST write your thoughts in the <SCRATCHPAD> buffer"
        5. "Consolidate your thoughts as necessary, grouping related thoughts together"

- "update note":
    - procedure:
        1. "You MUST read the .cursornotes and .cursorscratchpad files"
        2. "Consolidate previous thoughts from <SCRATCHPAD>"
        3. "Integrate new information from current conversation"
        4. "Format as dated entry, request date from user"
        5. "Append to .cursornotes file"
        6. "Clear <SCRATCHPAD> section in .cursorscratchpad"

- "run tests":
    - procedure:
        1. "You MUST poetry run pytest"

- "clean run":
    - procedure:
        1. "You MUST ❯ poetry run python -m nova.context_processor.cleanup -a && poetry run python -m nova.context_processor.cli --config config/nova.yaml"

- "fix pre-commit":
    - procedure:
        1. "You MUST poetry run pre-commit run mypy --all-files"
        2. "You MUST fix all the errors"

4. Code Style and Linting

### Python
- Use ruff for linting
- Use black for formatting
- Line length: 88 characters
- Target Python version: 3.9+
- Exclude patterns:
  - .git/*
  - __pycache__/*
  - .nova/*
  - build/*
  - dist/*
  - *.egg-info/*

### TypeScript/JavaScript
- Use ESLint with TypeScript parser
- Use Prettier for formatting
- Line length: 100 characters
- Target ECMAScript version: ES2020
- Exclude patterns:
  - node_modules/*
  - dist/*
  - build/*
  - coverage/*

### Pre-commit Hooks
- Run ruff
- Run black
- Run mypy
- Run ESLint
- Run Prettier
- Run TypeScript compiler
- Run tests

### Editor Settings
- Tab size: 2 spaces for TS/JS/JSON
- Tab size: 4 spaces for Python
- Insert final newline: true
- Trim trailing whitespace: true
- Auto-format on save: true
- Auto-organize imports: true

### Type Checking
- Python: Use mypy with strict mode
- TypeScript: Use strict mode
- Enable all strict type checks
- No implicit any
- No implicit returns
- No unused locals
- No unused parameters

### Testing
- Use pytest for Python
- Use Jest for TypeScript/JavaScript
- Require test coverage > 90%
- Run tests before commits
- Run type checks before commits

### Documentation
- Require docstrings for all public functions
- Use Google style docstrings for Python
- Use JSDoc for TypeScript/JavaScript
- Keep documentation in sync with code

### Version Control
- Require conventional commit messages
- Run pre-commit hooks locally
- Block commits that fail linting/testing
- Require branch to be up to date before merge
