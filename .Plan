# Nova Monitor Command Refactor Plan

## Phase 1: Core System Health Monitoring ✓
[x] Create new SystemHealthMonitor class
    - [x] Implement memory usage tracking (current and peak)
    - [x] Add CPU usage monitoring
    - [x] Add disk space monitoring
    - [x] Add directory health checks
    - [x] Add unit tests for each metric

## Phase 2: Enhanced Vector Store Statistics ✓
[x] Create VectorStoreStats class
    - [x] Add document statistics
        - [x] Total document count
        - [x] Document types breakdown
        - [x] Document size statistics
    - [x] Add chunk statistics
        - [x] Total chunks
        - [x] Average chunks per document
        - [x] Chunk size distribution
    - [x] Add temporal statistics
        - [x] Date range tracking (earliest/latest)
        - [x] Document age distribution
        - [x] Last update timestamp
    - [x] Add metadata statistics
        - [x] Tag frequency analysis
        - [x] Tag co-occurrence patterns
        - [x] Missing metadata tracking
    - [x] Add attachment tracking
        - [x] Count by type (images, PDFs, etc.)
        - [x] Size statistics by type
        - [x] Unsupported format tracking
    - [x] Implement caching for performance
        - [x] Cache statistics with TTL
        - [x] Incremental updates
    - [x] Add unit tests for statistics
        - [x] Test with various document types
        - [x] Test edge cases
        - [x] Test cache behavior

## Phase 3: Warning System Implementation ✓
[x] Create HealthWarningSystem class
    - [x] Define warning thresholds
        - [x] Memory usage thresholds (warning/critical)
        - [x] Disk space thresholds (warning/critical)
        - [x] CPU usage thresholds (warning/critical)
        - [x] Vector store size thresholds
    - [x] Implement warning detection
        - [x] Memory usage warnings
            - [x] Peak memory tracking
            - [x] Sustained high usage detection
        - [x] Directory status warnings
            - [x] Missing directories
            - [x] Permission issues
            - [x] Space availability
        - [x] Vector store warnings
            - [x] Size limits approaching
            - [x] High error rates
            - [x] Performance degradation
        - [x] Metadata warnings
            - [x] Missing required metadata
            - [x] Tag consistency issues
            - [x] Date range anomalies
    - [x] Add warning severity levels
        - [x] Info level warnings
        - [x] Warning level alerts
        - [x] Critical level alerts
    - [x] Implement warning aggregation
        - [x] Group related warnings
        - [x] Track warning history
        - [x] Detect recurring issues
    - [x] Add warning persistence
        - [x] Save warnings to .nova/warnings.json
        - [x] Track warning resolution
        - [x] Warning history cleanup
        - [x] Add unit tests
            - [x] Test threshold detection
            - [x] Test warning generation
            - [x] Test persistence
            - [x] Test aggregation logic

## Phase 4: CLI Command Refactor ✓
[x] Create new MonitorCommand class
    - [x] Implement subcommands
        - [x] health: Show system health status
            - [x] Memory usage and trends
            - [x] CPU usage and trends
            - [x] Disk space and trends
            - [x] Directory status
        - [x] stats: Show vector store statistics
            - [x] Document statistics
            - [x] Chunk statistics
            - [x] Tag statistics
            - [x] Performance metrics
        - [x] warnings: Show active warnings
            - [x] Filter by category
            - [x] Filter by severity
            - [x] Show warning history
    - [x] Add command options
        - [x] --format: Output format (text/json)
        - [x] --watch: Monitor mode with refresh
        - [x] --no-color: Disable colored output
        - [x] --verbose: Show detailed information
    - [x] Implement output formatting
        - [x] Create rich console layouts
        - [x] Add progress indicators
        - [x] Add color-coded status
        - [x] Add warning indicators
    - [x] Add integration tests
        - [x] Test each subcommand
        - [x] Test command options
        - [x] Test error handling
        - [x] Test output formats

## Phase 5: Output Formatting ✓
[x] Implement structured output formatting
    - [x] Create SystemHealthFormatter class
        - [x] Define base formatter interface
        - [x] Implement text formatter
        - [x] Implement JSON formatter
        - [x] Add color scheme configuration
    - [x] Add section-based output structure
        - [x] Define section templates
        - [x] Add section customization options
        - [x] Implement section ordering
    - [x] Implement warning summary formatting
        - [x] Add severity-based formatting
        - [x] Add category grouping
        - [x] Add trend indicators
    - [x] Add unit tests for formatters
        - [x] Test text output
        - [x] Test JSON output
        - [x] Test color schemes
        - [x] Test custom templates

## Phase 6: Testing & Documentation
[ ] Comprehensive testing
    - [ ] Add end-to-end tests
        - [ ] Test full monitoring workflow
        - [ ] Test error scenarios
        - [ ] Test performance under load
    - [ ] Update documentation
        - [ ] Add command reference
        - [ ] Add configuration guide
        - [ ] Add troubleshooting section
    - [ ] Add example outputs to docs
        - [ ] Health check examples
        - [ ] Warning examples
        - [ ] Statistics examples
    - [ ] Create usage examples
        - [ ] Basic monitoring
        - [ ] Advanced filtering
        - [ ] Custom formatting

## Milestones
1. ✓ Core monitoring functionality working
2. ✓ Vector store statistics complete
3. ✓ Warning system operational
4. ✓ CLI command unified
5. ✓ Output formatting complete
6. [ ] Documentation updated

## Dependencies
- psutil for system monitoring
- rich for formatted output
- pytest for testing

## Notes
- Keep all file sizes under 250 lines
- Store all system files in .nova directory
- Use type hints throughout
- Follow existing logging patterns
