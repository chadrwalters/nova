# Nova Development Plan

## Phase 1: Vector Store and File Ingestion [✓]

### Project Setup [✓]
- [✓] Initialize environment and dependencies
- [✓] Create .nova directory structure
- [✓] Configure input paths and system state
- [✓] Complete configuration system
- [✓] Set up local test runner

### Bear Export Processing [✓]
- [✓] Implement BearParser with full note/attachment support
- [✓] Add error recovery and validation
- [✓] Implement tag extraction system
- [✓] Configure processing pipeline

**MILESTONE**: ✅ Run tests for export processing - PASSED

### Vector Store Implementation [✓]
- [✓] Design and implement chunking engine
- [✓] Create embedding pipeline with caching
- [✓] Set up FAISS/Chroma integration
- [✓] Add comprehensive test suite

**MILESTONE**: ✅ Run tests for vector store - PASSED

## Phase 2: RAG and MCP Integration [IN PROGRESS]

### CLI Consolidation [✓]
- [✓] Create unified CLI with core commands
- [✓] Implement process-notes and process-vectors
- [✓] Add monitoring commands
- [✓] Complete documentation and tests

**MILESTONE**: ✅ Run tests for CLI - PASSED

### MCP Integration [IN PROGRESS]
- [✓] Set up MCP Server
- [✓] Create nova server module
- [✓] Implement prompt manager
  - [✓] Add prompt loading
  - [✓] Add prompt validation
  - [✓] Add prompt caching
  - [✓] Add prompt reloading
  - [✓] Add prompt error handling
  - [✓] Add prompt testing
- [✓] Define JSON Schemas
  - [✓] Vector store resource schema
  - [✓] Note resource schema
  - [✓] Attachment resource schema
  - [✓] Search tool schema
  - [✓] List tool schema
  - [✓] Extract tool schema
  - [✓] Remove tool schema
- [✓] Implement Tool Handlers
  - [✓] Base Tool Handler class
  - [✓] Search Tool implementation
  - [✓] List Tool implementation
  - [✓] Extract Tool implementation
  - [✓] Remove Tool implementation
  - [✓] Tool handler tests
- [IN PROGRESS] Implement Resource Handlers
  - [✓] Base Resource Handler class
  - [✓] Vector Store Handler
    - [✓] Basic implementation
    - [✓] Add/query/delete operations
    - [✓] Change notifications
    - [✓] Unit tests
  - [✓] Attachment Handler
    - [✓] File operations
    - [✓] Metadata handling
    - [✓] Change notifications
    - [✓] Unit tests
- [✓] Add Protocol Support
  - [✓] WebSocket server
  - [✓] HTTP endpoints
  - [✓] Authentication
  - [✓] Rate limiting
- [✓] Add Change Notifications
  - [✓] WebSocket events
  - [✓] HTTP webhooks
  - [✓] Event filtering
- [✓] Add Error Handling
  - [✓] Error codes
  - [✓] Error messages
  - [✓] Error recovery
  - [✓] Error logging
- [✓] Map Bear metadata to docling format
  - [✓] Title -> document.name
  - [✓] Tags -> metadata["tags"]
  - [✓] Date -> metadata["date"]
  - [✓] Attachments -> pictures[].image.uri
- [✓] Implement format detection
  - [✓] Add format detection using docling's FormatToExtensions
  - [✓] Add format detection using docling's FormatToMimeType
  - [✓] Add format validation before processing
  - [✓] Add format conversion for supported types
- [✓] Handle attachments through docling
  - [✓] Add PictureItem support for images
  - [✓] Add TableItem support for structured data
  - [✓] Add versioning through docling's origin tracking
    - [✓] Implement binary hash generation
    - [✓] Add mimetype detection
    - [✓] Add proper URI handling
    - [✓] Implement version tracking
  - [✓] Implement attachment format validation
    - [✓] Add MIME type validation
      - [✓] Create validation function
      - [✓] Add supported MIME types list
      - [✓] Add validation error messages
    - [✓] Add size validation
      - [✓] Define size limits
      - [✓] Add size check function
      - [✓] Add validation error messages
    - [✓] Add format-specific validation
      - [✓] Image format validation (dimensions, corruption)
      - [✓] CSV format validation (rows, columns)
      - [✓] Add validation error messages
  - [✓] Add attachment metadata preservation
    - [✓] Preserve original filenames
      - [✓] Add filename field to metadata
      - [✓] Handle filename collisions
      - [✓] Validate filename format
    - [✓] Keep creation/modification dates
      - [✓] Extract file timestamps
      - [✓] Add date fields to metadata
      - [✓] Handle timezone conversion
    - [✓] Store original file paths
      - [✓] Add path field to metadata
      - [✓] Make paths relative to note
      - [✓] Handle path normalization
    - [✓] Add metadata validation
      - [✓] Validate required fields
      - [✓] Check field formats
      - [✓] Handle missing data
- [IN PROGRESS] Update error handling
  - [✓] Use docling's built-in error system
  - [✓] Map Bear-specific errors to docling errors
  - [✓] Maintain context in error messages
  - [✓] Add error recovery strategies
    - [✓] Handle invalid MIME types
    - [✓] Handle file size limits
    - [✓] Handle format validation
    - [✓] Add retry logic for transient errors
    - [✓] Implement graceful degradation
    - [✓] Add fallback options

#### 3. Test Suite Adaptation [CURRENT FOCUS]
- [✓] Fix failing tests in test_note_resource.py
  - [✓] Update MockBearParser to use docling model
  - [✓] Fix NoteHandler attribute errors
  - [✓] Update test assertions for new model
- [✓] Fix failing tests in test_handlers.py
  - [✓] Remove OCR-related tests
  - [✓] Update AttachmentHandler tests
  - [✓] Fix version mismatch errors
- [✓] Fix failing tests in test_bear_parser.py
  - [✓] Update docling format handling
  - [✓] Fix file conversion errors
  - [✓] Update metadata assertions
- [ ] Convert mock data to docling format
  - [ ] Create test fixtures with docling models
  - [ ] Update test data generation
  - [ ] Add format-specific test cases
- [ ] Update assertions for new model
  - [ ] Add docling model validation
  - [ ] Update metadata checks
  - [ ] Add format validation
- [ ] Add docling-specific test cases
  - [ ] Test format detection
  - [ ] Test attachment handling
  - [ ] Test error cases
- [ ] Verify format handling
  - [ ] Test supported formats
  - [ ] Test format conversion
  - [ ] Test error handling

**MILESTONE**: Get all tests passing with docling integration

#### 4. Resource Handler Updates [PLANNED]
- [ ] Update NoteHandler for docling model
  - [ ] Implement docling model conversion
  - [ ] Add format validation
  - [ ] Update metadata handling
- [ ] Modify AttachmentHandler integration
  - [ ] Use docling's attachment types
  - [ ] Add format validation
  - [ ] Update storage strategy
- [ ] Implement new metadata mapping
  - [ ] Map Bear metadata to docling
  - [ ] Add custom metadata support
  - [ ] Update search indexing
- [ ] Add format validation
  - [ ] Implement format detection
  - [ ] Add conversion support
  - [ ] Handle unsupported formats

**MILESTONE**: Get resource handlers working with docling model

#### 5. CLI Command Updates [PLANNED]
- [ ] Update process-notes command
  - [ ] Add format detection
  - [ ] Implement conversion
  - [ ] Update progress reporting
- [ ] Modify vector processing
  - [ ] Update chunking for docling
  - [ ] Modify embedding strategy
  - [ ] Update metadata handling
- [ ] Add format validation
  - [ ] Implement validation rules
  - [ ] Add conversion options
  - [ ] Handle validation errors
- [ ] Enhance error reporting
  - [ ] Add detailed error messages
  - [ ] Implement recovery options
  - [ ] Update logging format

### Core Testing Phase [IN PROGRESS]
- [✓] Set up testing infrastructure
  - [✓] Add pytest configuration
  - [✓] Add test utilities
  - [✓] Add test fixtures
- [✓] Resource Handler Tests
  - [✓] Note resource tests
  - [✓] Vector store tests
  - [✓] Attachment tests
    - [✓] Basic functionality tests
    - [✓] File operations tests
    - [✓] Metadata handling tests
    - [✓] Error handling tests
    - [✓] MIME type handling tests
    - [✓] Concurrent access tests
    - [✓] Store operation error tests
      - [✓] Storage path errors
      - [✓] File system errors
      - [✓] Permission errors
      - [✓] Disk space errors
      - [✓] Metadata validation errors
  - [✓] Tool Registry Tests
    - [✓] Search tool tests
    - [✓] List tool tests
    - [✓] Extract tool tests
    - [✓] Remove tool tests
  - [✓] Change Notification Tests
    - [✓] Event tests
    - [✓] Webhook tests
    - [✓] Filter tests
  - [✓] Error Handling Tests
    - [✓] Error code tests
    - [✓] Recovery tests
    - [✓] Logging tests

**MILESTONE**: Get all existing tests passing with >90% coverage

## Previous Focus [IN PROGRESS]
1. [✓] Test Stabilization
   - [✓] Fix type errors in OCR handler
   - [✓] Fix attachment store attribute errors
   - [✓] Fix notification type compatibility
   - [✓] Fix tool handler argument errors
   - [✓] Fix vector store type issues
   - [✓] Run full test suite until passing
2. [IN PROGRESS] Real-World Usage Preparation
   - [✓] Create sample Bear notes for testing
   - [✓] Set up test input directory
   - [IN PROGRESS] Pipeline Validation
     - [✓] Initial Bear note processing
       - [✓] Verify metadata extraction
       - [✓] Check tag processing
       - [✓] Validate attachment handling
     - [IN PROGRESS] OCR Processing
       - [ ] Test image recognition
       - [ ] Verify confidence scores
       - [ ] Check placeholder generation
     - [✓] Vector Store Population
       - [✓] Monitor chunking results
       - [✓] Verify embedding generation
       - [✓] Check metadata preservation
     - [IN PROGRESS] MCP Integration Testing
       - [ ] Test search capabilities
         - [ ] Basic text search
         - [ ] Tag-based filtering
         - [ ] Date range queries
       - [ ] Verify context retrieval
         - [ ] Check relevance scores
         - [ ] Validate metadata inclusion
       - [ ] Validate RAG responses
         - [ ] Test query understanding
         - [ ] Check source attribution
         - [ ] Verify response quality
   - [NOT STARTED] Interactive Testing
     - [ ] CLI-based querying
       - [ ] Implement search CLI
       - [ ] Add filtering options
       - [ ] Support result formatting
     - [ ] Response validation
       - [ ] Define quality metrics
       - [ ] Create test queries
       - [ ] Measure response accuracy
     - [ ] Performance monitoring
       - [ ] Track query latency
       - [ ] Monitor resource usage
       - [ ] Log system metrics
   - [NOT STARTED] System Validation
     - [ ] Resource usage tracking
       - [ ] Memory profiling
       - [ ] CPU utilization
       - [ ] Disk I/O patterns
     - [ ] Error handling verification
       - [ ] Test failure modes
       - [ ] Verify recovery paths
       - [ ] Check error reporting
     - [ ] Recovery testing
       - [ ] Test system restarts
       - [ ] Validate state persistence
       - [ ] Check data integrity

## Blockers [IN PROGRESS]
1. [✓] Resource Handlers
   - [✓] OCR engine selection and configuration
   - [✓] Attachment storage strategy
     - [✓] Basic file operations
     - [✓] Metadata handling
     - [✓] Concurrent access
     - [✓] Error handling and recovery
   - [✓] Performance optimization for large files

## Monitoring Implementation [NOT STARTED]
- [ ] Create minimal web app
  - [ ] FastAPI-based server
  - [ ] Health check endpoint
  - [ ] Basic metrics display
- [ ] Add structured logging
  - [ ] Configure structlog
  - [ ] Define log format
  - [ ] Add log handlers
- [ ] Implement metrics collection
  - [ ] Vector store stats
  - [ ] Query performance
  - [ ] System health
- [ ] Create API endpoints
  - [ ] Health check
  - [ ] Recent ingestion stats
  - [ ] Vector store metrics
- [ ] Add tests for monitoring
  - [ ] Server tests
  - [ ] Metrics tests
  - [ ] Logging tests

**MILESTONE**: Run tests for monitoring

### Documentation Updates [NOT STARTED]
- [ ] Update README.md
  - [ ] Add uv setup instructions
  - [ ] Include quickstart guide
  - [ ] Document CLI usage
- [ ] Update architecture docs
  - [ ] Add MCP integration details
  - [ ] Document monitoring approach
  - [ ] Include performance considerations
- [ ] Create developer guide
  - [ ] Environment setup
  - [ ] Testing procedures
  - [ ] Contribution guidelines

**MILESTONE**: Documentation review

### RAG Implementation [NOT STARTED]
- [ ] Create query processor
  - [ ] Tool-based decomposition
  - [ ] Context window management
  - [ ] Source attribution
- [ ] Implement retrieval system
  - [ ] Hybrid search functionality
  - [ ] Chunk selection logic
  - [ ] Dynamic context assembly
- [ ] Add result processor
  - [ ] Source validation
  - [ ] Metadata enrichment
  - [ ] Relevance scoring
- [ ] Create Claude interface
  - [ ] Anthropic API integration
  - [ ] Message formatting
  - [ ] Session management
- [ ] Add tests for RAG pipeline

**MILESTONE**: Run tests for RAG system

## Phase 3: Claude Desktop Integration [NOT STARTED]

### Desktop Client Setup [NOT STARTED]
- [ ] Create desktop client structure
- [ ] Set up IPC mechanisms
  - [ ] Local communication
  - [ ] Resource management
- [ ] Implement Claude integration
  - [ ] MCP message handling
  - [ ] Response streaming
  - [ ] Error recovery
- [ ] Add tests for desktop client

**MILESTONE**: Run tests for desktop integration

### Desktop Features [NOT STARTED]
- [ ] Create query interface
- [ ] Implement response display
- [ ] Add settings management
  - [ ] API key handling
  - [ ] Vector store config
- [ ] Implement error handling
- [ ] Add tests for desktop features

**MILESTONE**: Run tests for desktop features

## Phase 4: Monitoring System [NOT STARTED]

### Monitoring Backend [NOT STARTED]
- [ ] Implement metrics collection
  - [ ] Vector store stats
  - [ ] Query performance
  - [ ] System health
- [ ] Create logging system
- [ ] Add performance tracking
- [ ] Create API endpoints
- [ ] Add tests for monitoring backend

**MILESTONE**: Run tests for monitoring backend

### Monitoring Frontend [NOT STARTED]
- [ ] Create dashboard UI
- [ ] Implement metrics display
- [ ] Add log viewer
- [ ] Create system status page
- [ ] Add tests for monitoring frontend

**MILESTONE**: Run tests for monitoring frontend
