# Code Refactoring Plan [IN PROGRESS]

Below is a multi-step plan to refactor and unify the Nova codebase. After each step, run the tests (uv run pytest -v) to ensure that changes are stable before moving on.

## Step 1: Consolidate Bear Note Parsing and Processing [✓]
- [✓] Created BearNoteProcessing module (nova/bear_parser/processing.py) with a single process_bear_notes() method
- [✓] Moved file-copying logic into the new module with proper error handling
- [✓] Removed redundant process_notes.py and consolidated into BearParser logic
- [✓] Created comprehensive test suite in tests/bear_parser/test_processing.py
- [✓] Milestone: All tests passing, confirming Bear note processing works as expected

## Step 2: Merge Partial Document Conversion Paths [✓]
- [✓] Designated DocumentConverter (nova/docling/document_converter.py) as the single conversion entry point
- [✓] Removed duplicate converter implementation
- [✓] Removed unused formats (DOCX, XLSX, PPTX, CSV)
- [✓] Updated and merged test cases in tests/docling/test_document_converter.py
- [✓] Milestone: All document converter tests passing

## Step 3: Cleanup in nova/cli/commands Directory [✓]
- [✓] Merged process_vectors.py and process_bear_vectors.py into single command with --bear-notes flag
- [✓] Removed redundant start_mcp.py (functionality in nova_mcp_server.py)
- [✓] Verified no monitor.py conflicts with monitor/command.py
- [✓] Updated __init__.py to reflect command consolidation
- [✓] Milestone: CLI commands unified and redundancy removed

## Step 4: Vector Store & Search Refactoring [✓]
- [✓] Fixed tag extraction in Bear notes to handle hyphens and complex tags
- [✓] Fixed attachment handling with proper type handling (AttachmentDict)
- [✓] Fixed metadata serialization with JSON handling for tags and attachments
- [✓] Fixed vector store clear operation using get/delete by IDs
- [✓] Simplified vector store by removing batch processing and caching
- [✓] Standardized on DefaultEmbeddingFunction for embeddings
- [✓] Fixed ChromaDB integration and JSON handling in search results
- [✓] Fixed environment variable substitution in config paths
- [✓] Fixed search command to handle both string and list tag formats
- [✓] Milestone: Vector store operations and search functionality working correctly

## Step 5: Removal of Old Tools in src/nova/cli/*.py [✓]
- [✓] Prune unused CLI modules (e.g., start_echo, start_mcp) if not in final usage
- [✓] Combine similar commands (process_vectors vs. process_bear_vectors) or keep only the relevant approach
- [✓] Update main CLI entry point (nova/cli/main.py) to reference only the final set of commands
- [✓] Remove or unify any test files in tests/cli/ for old commands
- [✓] Milestone: All tests passing with no broken references

## Step 6: General Lint & Cleanup [IN PROGRESS]
- [✓] Remove references to older "Claude Desktop" logs or partial code in nova/cli/commands/nova_mcp_server.py if unused
- [✓] Verify updated logs in test_logging.py only reference current logging approach
- [✓] Confirm no stale references remain in any config or example scripts
- [ ] Milestone: Run tests and also run lint checks to confirm code style consistency

## Step 7: Final Verification and Integration [ ]
- [ ] Review the entire codebase for leftover references or partial merges
- [ ] Check that all example commands and docs (README, docs/*) reflect the final consolidated commands
- [ ] Confirm that each test file is up-to-date with the final code paths
- [ ] Perform a final test run (uv run pytest -v) to ensure full coverage and stable integration

Once all steps are complete and tests pass, we will have a streamlined, unified codebase, significantly reduced duplication, and a clear test suite that verifies each major feature in a single, consistent location.
