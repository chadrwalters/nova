# Nova Dead Code Cleanup Plan

## Overview
This plan outlines the systematic removal of dead code from the Nova codebase while maintaining core pipeline functionality. Each phase includes validation steps using cleanup.sh and consolidate.sh to ensure pipeline integrity.

## Success Criteria
- All pipeline phases continue to work correctly
- Directory structure remains intact and accessible
- No regression in core functionality
- Clean git history with meaningful commits

## Validation Method
For each phase:
1. Run ./cleanup.sh
2. Run ./consolidate.sh
3. Verify all processing directories are created correctly
4. Verify pipeline phases execute without errors

## Phases

### 1️⃣ Create Safety Net
**Goal**: Establish a safe environment for code removal
- [x] Create backup branch: `git checkout -b cleanup/dead-code-removal`
- [x] Create restore point: `git add . && git commit -m "chore: create restore point before dead code removal"`

### 2️⃣ Remove Markitdown Processors
**Goal**: Remove duplicate processor implementations
- [x] Delete src/nova/tools/markitdown/processors/office.py
- [x] Delete src/nova/tools/markitdown/processors/markdown.py
- [x] Delete src/nova/tools/markitdown/processors/image.py
- [x] Run validation
- [x] Commit: `git commit -m "refactor: remove unused markitdown processors"`

### 3️⃣ Remove Parse Phase Directories
**Goal**: Remove unused parse phase implementations
- [ ] Delete src/nova/tools/bear/parse_phase/
- [ ] Delete src/nova/tools/markdown/parse_phase/
- [ ] Delete src/nova/tools/mcp/parse_phase/
- [ ] Run validation
- [ ] Commit: `git commit -m "refactor: remove unused parse phase directories"`

### 4️⃣ Clean Up Core Pipeline
**Goal**: Remove duplicate base processor implementation
- [ ] Remove BaseProcessor class from src/nova/core/pipeline/processor.py
- [ ] Verify base.py BaseProcessor remains intact
- [ ] Run validation
- [ ] Commit: `git commit -m "refactor: remove duplicate BaseProcessor"`

### 5️⃣ Clean Up Utils
**Goal**: Remove unused utility modules
- [ ] Delete src/nova/utils/directory.py
- [ ] Delete src/nova/utils/openai.py
- [ ] Run validation
- [ ] Commit: `git commit -m "refactor: remove unused utility modules"`

### 6️⃣ Final Validation
**Goal**: Ensure complete pipeline functionality
- [ ] Run full pipeline test:
  ```bash
  ./cleanup.sh
  ./consolidate.sh --force
  ```
- [ ] Verify all directories:
  - [ ] Phase directories
  - [ ] Image processing directories
  - [ ] Office processing directories
  - [ ] Temp directories
  - [ ] State file
- [ ] Merge to main:
  ```bash
  git checkout main
  git merge cleanup/dead-code-removal
  ```

## Rollback Procedures

### Immediate Rollback
If a phase fails validation:
```bash
git reset --hard HEAD~1
```

### Complete Rollback
If major issues are encountered:
```bash
git checkout main
git branch -D cleanup/dead-code-removal
```

## Directory Checklist
Verify these directories after each phase:
- [ ] NOVA_PHASE_MARKDOWN_PARSE
- [ ] NOVA_PHASE_MARKDOWN_CONSOLIDATE
- [ ] NOVA_PHASE_MARKDOWN_AGGREGATE
- [ ] NOVA_PHASE_MARKDOWN_SPLIT
- [ ] NOVA_ORIGINAL_IMAGES_DIR
- [ ] NOVA_PROCESSED_IMAGES_DIR
- [ ] NOVA_IMAGE_METADATA_DIR
- [ ] NOVA_IMAGE_CACHE_DIR
- [ ] NOVA_OFFICE_ASSETS_DIR
- [ ] NOVA_OFFICE_TEMP_DIR

## Notes
- Each phase should be executed sequentially
- Validation must pass before proceeding to next phase
- Document any unexpected behavior or issues
- Keep commit messages clear and descriptive 