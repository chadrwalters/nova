# Nova Refactoring Plan (Updated)

**Target**: Continue implementing the design per new-architecture.md  
**Overall Status**: IN PROGRESS (70%)  
**Immediate Priority**: Get the Pipeline (Parse → Disassemble → Split → Finalize) passing with simplified reference handling.

---

## CURRENT STATUS & ALIGNMENT

We are transitioning from the old architecture.md approach to the new new-architecture.md design. The pipeline is being simplified to handle references more effectively:

1. Reference Handling (Simplified)
   - Using simple reference markers with type indicators (e.g., [ATTACH:IMG:marker123])
   - No complex path resolution or chain depth tracking
   - Focus on unique markers that can be easily looked up

2. Missing Parsed Files & Metadata Issues
   - The finalization step reports that only 9 files are parsed out of 26 total input files (leads to validation failure)
   - Files that failed due to "No such file or directory" or partial path issues need either:
     - A robust handling strategy (graceful skip, partial parse, or fallback)
     - Fixing directory lookups or ignoring certain file types if required

3. Pipeline Phase Validation
   - The pipeline tries to finalize with incomplete or erroneous parse & disassemble outputs
   - We need more robust checks that fail early if parse or disassembly is incomplete

---

## UPDATED MILESTONES & TASKS

### 1. Pipeline Stabilization (Immediate Focus)

1.1. Parse Phase Fixes  
✓ Fixed file discovery in pipeline to use correct input directory
✓ Added debug logging to track file discovery and processing
✓ Verified handlers for all file types:
  - DocumentHandler: 7 pdf, 2 docx
  - ImageHandler: 2 png, 1 svg, 1 heic
  - TextHandler: 1 txt, 1 json
  - MarkdownHandler: 7 md
  - SpreadsheetHandler: 2 xlsx, 1 csv
  - HTMLHandler: 1 html
✓ Added validation to ensure metadata is properly saved
✓ Added detailed logging of skipped/failed files
✓ Implemented retry logic for temporary failures

1.2. Disassemble Phase Fixes  
• Verify reference markers are created and tracked properly
• Confirm that disassembly metadata exists for each parsed file
• Where disassembly is not applicable, use consistent skip logic

1.3. Split Phase Fixes  
• Validate that split only occurs on files needing it
• Maintain reference marker integrity during consolidation
• Handle attachments consistently with new reference approach

1.4. Finalize Phase Fixes  
• Add robust checks for parsed file counts
• Verify all reference markers exist and are valid
• Clean up any temporary processing files

### 2. Reference Management & Validation

2.1. Simplified Reference System
• Use [ATTACH:TYPE:MARKER] format consistently
• Remove complex path resolution logic
• Update tests to reflect simpler reference handling

2.2. Reference Validation
• Check that all reference markers are unique
• Verify referenced content exists
• Remove circular reference checks (no longer needed)

2.3. Cleanup Strategy
• Remove invalid reference markers
• Log any missing references for review
• Keep reference validation simple and fast

### 3. Longer-Term / Post-Fix Roadmap

3.1. Performance & Pipeline Optimization  
• After stabilization, measure performance
• Optimize for large volumes or attachments

3.2. Full new-architecture.md Adoption  
• Complete migration to simplified reference system
• Align directory structure and pipeline steps

3.3. Additional Feature Enhancements  
• Expand test coverage for reference scenarios
• Improve logging and user feedback

---

## RISKS & MITIGATION (UPDATED)

1. Reference Management
   • Risk: Duplicate or invalid markers
   • Mitigation: Use consistent marker generation, validate uniqueness

2. Missing / Incomplete Files
   • Risk: Continued mismatch in finalization counts
   • Mitigation: Better file tracking and skip logic

3. Implementation Complexity
   • Risk: Over-engineering the solution
   • Mitigation: Keep reference system simple and focused

---

## NEXT STEPS

• Update all handlers to use simplified reference format
• Fix parse phase file counting and validation
• Re-run pipeline to verify stability
• Then complete the new architecture implementation

**End of Updated Plan**