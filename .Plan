# Nova Development Plan

## Phase 1: Vector Store and File Ingestion [✓]

### Project Setup [✓]
- [✓] Initialize environment and dependencies
- [✓] Create .nova directory structure
- [✓] Configure input paths and system state
- [✓] Complete configuration system
- [✓] Set up local test runner

### Bear Export Processing [✓]
- [✓] Implement BearParser with full note/attachment support
- [✓] Add error recovery and validation
- [✓] Implement tag extraction system
- [✓] Set up OCR integration with fallbacks
- [✓] Configure processing pipeline

**MILESTONE**: ✅ Run tests for export processing - PASSED

### Vector Store Implementation [✓]
- [✓] Design and implement chunking engine
- [✓] Create embedding pipeline with caching
- [✓] Set up FAISS/Chroma integration
- [✓] Add comprehensive test suite

**MILESTONE**: ✅ Run tests for vector store - PASSED

## Phase 2: RAG and MCP Integration [IN PROGRESS]

### CLI Consolidation [✓]
- [✓] Create unified CLI with core commands
- [✓] Implement process-notes and process-vectors
- [✓] Add monitoring commands
- [✓] Complete documentation and tests

**MILESTONE**: ✅ Run tests for CLI - PASSED

### MCP Integration [IN PROGRESS]
- [✓] Set up MCP Server
- [✓] Create nova server module
- [✓] Implement prompt manager
  - [✓] Add prompt loading
  - [✓] Add prompt validation
  - [✓] Add prompt caching
  - [✓] Add prompt reloading
  - [✓] Add prompt error handling
  - [✓] Add prompt testing
- [✓] Define JSON Schemas
  - [✓] Vector store resource schema
  - [✓] Note resource schema
  - [✓] Attachment resource schema
  - [✓] OCR resource schema
  - [✓] Search tool schema
  - [✓] List tool schema
  - [✓] Extract tool schema
  - [✓] Remove tool schema
- [✓] Implement Tool Handlers
  - [✓] Base Tool Handler class
  - [✓] Search Tool implementation
  - [✓] List Tool implementation
  - [✓] Extract Tool implementation
  - [✓] Remove Tool implementation
  - [✓] Tool handler tests
- [IN PROGRESS] Implement Resource Handlers
  - [✓] Base Resource Handler class
  - [✓] Vector Store Handler
    - [✓] Basic implementation
    - [✓] Add/query/delete operations
    - [✓] Change notifications
    - [✓] Unit tests
  - [✓] Attachment Handler
    - [✓] File operations
    - [✓] Metadata handling
    - [✓] OCR integration
    - [✓] Change notifications
    - [✓] Unit tests
  - [✓] OCR Handler
    - [✓] Engine configuration
    - [✓] Processing pipeline
    - [✓] Result caching
    - [✓] Change notifications
    - [✓] Unit tests
- [✓] Add Protocol Support
  - [✓] WebSocket server
  - [✓] HTTP endpoints
  - [✓] Authentication
  - [✓] Rate limiting
- [✓] Add Change Notifications
  - [✓] WebSocket events
  - [✓] HTTP webhooks
  - [✓] Event filtering
- [✓] Add Error Handling
  - [✓] Error codes
  - [✓] Error messages
  - [✓] Error recovery
  - [✓] Error logging

### Core Testing Phase [IN PROGRESS]
- [✓] Set up testing infrastructure
  - [✓] Add pytest configuration
  - [✓] Add test utilities
  - [✓] Add test fixtures
- [✓] Resource Handler Tests
  - [✓] Note resource tests
  - [✓] Vector store tests
  - [✓] Attachment tests
    - [✓] Basic functionality tests
    - [✓] File operations tests
    - [✓] Metadata handling tests
    - [✓] Error handling tests
    - [✓] MIME type handling tests
    - [✓] Concurrent access tests
    - [✓] Store operation error tests
      - [✓] Storage path errors
      - [✓] File system errors
      - [✓] Permission errors
      - [✓] Disk space errors
      - [✓] Metadata validation errors
  - [✓] OCR tests
    - [✓] Basic functionality tests
    - [✓] Image processing tests
    - [✓] Cache system tests
    - [✓] Error handling tests
    - [✓] Engine error tests
    - [✓] Confidence value tests
- [✓] Tool Registry Tests
  - [✓] Search tool tests
  - [✓] List tool tests
  - [✓] Extract tool tests
  - [✓] Remove tool tests
- [✓] Change Notification Tests
  - [✓] Event tests
  - [✓] Webhook tests
  - [✓] Filter tests
- [✓] Error Handling Tests
  - [✓] Error code tests
  - [✓] Recovery tests
  - [✓] Logging tests

**MILESTONE**: Get all existing tests passing with >90% coverage

## Current Focus [IN PROGRESS]
1. [IN PROGRESS] Test Stabilization
   - [ ] Fix type errors in OCR handler
   - [ ] Fix attachment store attribute errors
   - [ ] Fix notification type compatibility
   - [ ] Fix tool handler argument errors
   - [ ] Fix vector store type issues
   - [ ] Run full test suite until passing
2. [NOT STARTED] Real-World Usage Preparation
   - [ ] Create sample Bear notes for testing
   - [ ] Set up test input directory
   - [ ] Configure OCR engine with real images
   - [ ] Test vector store with actual content
   - [ ] Validate end-to-end workflow
   - [ ] Document real-world usage patterns

## Blockers [IN PROGRESS]
1. [✓] Resource Handlers
   - [✓] OCR engine selection and configuration
   - [✓] Attachment storage strategy
     - [✓] Basic file operations
     - [✓] Metadata handling
     - [✓] Concurrent access
     - [✓] Error handling and recovery
   - [✓] Performance optimization for large files

## Monitoring Implementation [NOT STARTED]
- [ ] Create minimal web app
  - [ ] FastAPI-based server
  - [ ] Health check endpoint
  - [ ] Basic metrics display
- [ ] Add structured logging
  - [ ] Configure structlog
  - [ ] Define log format
  - [ ] Add log handlers
- [ ] Implement metrics collection
  - [ ] Vector store stats
  - [ ] Query performance
  - [ ] System health
- [ ] Create API endpoints
  - [ ] Health check
  - [ ] Recent ingestion stats
  - [ ] Vector store metrics
- [ ] Add tests for monitoring
  - [ ] Server tests
  - [ ] Metrics tests
  - [ ] Logging tests

**MILESTONE**: Run tests for monitoring

### Documentation Updates [NOT STARTED]
- [ ] Update README.md
  - [ ] Add uv setup instructions
  - [ ] Include quickstart guide
  - [ ] Document CLI usage
- [ ] Update architecture docs
  - [ ] Add MCP integration details
  - [ ] Document monitoring approach
  - [ ] Include performance considerations
- [ ] Create developer guide
  - [ ] Environment setup
  - [ ] Testing procedures
  - [ ] Contribution guidelines

**MILESTONE**: Documentation review

### RAG Implementation [NOT STARTED]
- [ ] Create query processor
  - [ ] Tool-based decomposition
  - [ ] Context window management
  - [ ] Source attribution
- [ ] Implement retrieval system
  - [ ] Hybrid search functionality
  - [ ] Chunk selection logic
  - [ ] Dynamic context assembly
- [ ] Add result processor
  - [ ] Source validation
  - [ ] Metadata enrichment
  - [ ] Relevance scoring
- [ ] Create Claude interface
  - [ ] Anthropic API integration
  - [ ] Message formatting
  - [ ] Session management
- [ ] Add tests for RAG pipeline

**MILESTONE**: Run tests for RAG system

## Phase 3: Claude Desktop Integration [NOT STARTED]

### Desktop Client Setup [NOT STARTED]
- [ ] Create desktop client structure
- [ ] Set up IPC mechanisms
  - [ ] Local communication
  - [ ] Resource management
- [ ] Implement Claude integration
  - [ ] MCP message handling
  - [ ] Response streaming
  - [ ] Error recovery
- [ ] Add tests for desktop client

**MILESTONE**: Run tests for desktop integration

### Desktop Features [NOT STARTED]
- [ ] Create query interface
- [ ] Implement response display
- [ ] Add settings management
  - [ ] API key handling
  - [ ] Vector store config
- [ ] Implement error handling
- [ ] Add tests for desktop features

**MILESTONE**: Run tests for desktop features

## Phase 4: Monitoring System [NOT STARTED]

### Monitoring Backend [NOT STARTED]
- [ ] Implement metrics collection
  - [ ] Vector store stats
  - [ ] Query performance
  - [ ] System health
- [ ] Create logging system
- [ ] Add performance tracking
- [ ] Create API endpoints
- [ ] Add tests for monitoring backend

**MILESTONE**: Run tests for monitoring backend

### Monitoring Frontend [NOT STARTED]
- [ ] Create dashboard UI
- [ ] Implement metrics display
- [ ] Add log viewer
- [ ] Create system status page
- [ ] Add tests for monitoring frontend

**MILESTONE**: Run tests for monitoring frontend
