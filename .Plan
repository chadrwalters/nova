# Nova Test Implementation Plan
Last Updated: 2024-01-04
Status: [IN_PROGRESS]
Progress: 40%

## Overview
This plan outlines the implementation of a comprehensive test suite for the Nova document processing pipeline. The test suite will be organized into unit and integration tests, covering core functionality, handlers, and pipeline phases.

## Risk Register
- [MEDIUM] Time required to create appropriate mock test files
- [LOW] Potential conflicts with existing test configurations
- [LOW] Integration test complexity with async operations
- [LOW] Edge cases in file path handling and sanitization

## Technical Decisions
1. Using pytest with pytest-asyncio for async testing
2. Implementing filesystem mocks using pytest's tmp_path
3. Following AAA (Arrange, Act, Assert) pattern for test structure
4. Targeting 80% initial coverage
5. OpenAI API testing strategy:
   - Mock API calls by default
   - Use --openai-api flag to enable real API calls
   - Provide mock responses via fixtures
   - Separate test cases for mocked and real API calls
6. File path handling:
   - Sanitize filenames for cross-platform compatibility
   - Preserve trailing dots in filenames when needed
   - Handle special characters and Unicode conversion

## Implementation Phases

### Phase 1: Initial Test Structure Setup [DONE]
- [x] Create test directory structure
  ```
  tests/
  ├── integration/
  │   └── test_nova_pipeline.py
  └── unit/
      ├── test_core.py
      ├── test_handlers.py
      ├── test_phase_parse.py
      ├── test_phase_disassemble.py
      ├── test_phase_split.py
      ├── test_phase_finalize.py
      ├── test_config_manager.py
      └── test_utils_path.py
  ```
- [x] Create tests/conftest.py with common fixtures
- [x] Set up mock file system fixtures
- [x] Create all test files with placeholder classes
- [x] Configure test state management
- [x] Set up pytest.ini with basic configuration

### Phase 2: Core Module Tests [IN_PROGRESS]
- [x] Create test file structure
  - [x] test_core.py
  - [x] test_config_manager.py
  - [x] test_utils_path.py
- [x] Implement test_core.py
  - [x] TestMetricsTrackerBasics
    - [x] test_record_operation_duration
    - [x] test_update_time_statistics
    - [x] test_concurrent_operations
    - [x] test_metrics_summary
  - [x] TestFileMetadataSaveAndLoad
    - [x] test_save_metadata
    - [x] test_load_metadata_from_file
  - [x] TestNovaLoggerConfiguration
    - [x] test_logger_levels
    - [x] test_handler_configuration
- [x] Implement test_config_manager.py
  - [x] TestConfigManagerBasics
    - [x] test_load_default_config
    - [x] test_load_custom_config
  - [x] TestConfigManagerValidation
    - [x] test_required_fields
    - [x] test_field_types
  - [x] TestConfigManagerPaths
    - [x] test_expand_variables
    - [x] test_create_directories
- [x] Implement test_utils_path.py
  - [x] TestSanitizeFilename
    - [x] test_remove_invalid_chars
    - [x] test_cyrillic_to_latin
    - [x] test_empty_and_invalid_filenames
  - [x] TestRelativePath
    - [x] test_same_directory
    - [x] test_different_directory
    - [x] test_nested_directories
  - [x] TestPathNormalization
    - [x] test_normalize_separators
    - [x] test_resolve_dots
  - [x] TestMetadataPath
    - [x] test_metadata_path_generation
  - [x] TestMarkdownPath
    - [x] test_markdown_path_generation

### Phase 3: Handler Tests [TODO]
- [ ] Create test file structure
  - [ ] test_handlers.py with placeholder classes
- [ ] Implement test_handlers.py
  - [ ] TestMarkdownHandlerBasic
    - [ ] test_update_links
    - [ ] test_parsed_md_output
    - [ ] test_metadata_update
  - [ ] TestDocumentHandlerPDFExtraction
    - [ ] test_pdf_text_extraction
    - [ ] test_pdf_metadata_update
    - [ ] test_pdf_error_handling
  - [ ] TestImageHandlerHeicConversion
    - [ ] test_heic_conversion
    - [ ] test_jpeg_passthrough
    - [ ] test_image_analysis_placeholder
    - [ ] test_error_handling
- [ ] Create mock test files
  - [ ] Sample markdown files
  - [ ] Small test PDF
  - [ ] Test images

### Phase 4: Phase Tests [TODO]
- [ ] Create test file structure
  - [ ] test_phase_parse.py
  - [ ] test_phase_disassemble.py
  - [ ] test_phase_split.py
  - [ ] test_phase_finalize.py
- [ ] Implement phase test files
  - [ ] ParsePhase tests
    - [ ] test_parse_markdown
    - [ ] test_parse_pdf
    - [ ] test_parse_image
    - [ ] test_parse_multiple_files
    - [ ] test_error_handling
  - [ ] DisassemblyPhase tests
    - [ ] test_basic_disassembly
    - [ ] test_no_explicit_sections
    - [ ] test_multiple_summary_sections
    - [ ] test_code_block_preservation
    - [ ] test_metadata_updates
  - [ ] SplitPhase tests
    - [ ] test_basic_section_splitting
    - [ ] test_nested_sections
    - [ ] test_code_block_handling
    - [ ] test_list_preservation
    - [ ] test_metadata_tracking
  - [ ] FinalizePhase tests
    - [ ] test_basic_finalization
    - [ ] test_attachment_handling
    - [ ] test_metadata_consolidation
    - [ ] test_table_of_contents
    - [ ] test_error_handling

### Phase 5: Integration Tests [TODO]
- [ ] Implement test_nova_pipeline.py
  - [ ] TestPipelineEndToEndMarkdown
    - [ ] test_markdown_end_to_end
    - [ ] test_pipeline_with_all_formats
    - [ ] test_pipeline_handles_unsupported_file
    - [ ] test_pipeline_with_ai_analysis
    - [ ] test_pipeline_state_tracking

### Phase 6: Test Resources [TODO]
- [ ] Create test resources directory structure
  ```
  tests/resources/
  ├── markdown/
  │   ├── simple.md
  │   └── with_images.md
  ├── documents/
  │   ├── sample.pdf
  │   └── create_test_pdf.py
  └── images/
      ├── test.jpg
      ├── test.png
      └── create_test_image.py
  ```
- [ ] Create minimal test files
- [ ] Document test resource usage

### Phase 7: CI Setup [TODO]
- [ ] Configure pytest.ini
- [ ] Add test commands to pyproject.toml
- [ ] Set up coverage reporting

## Implementation Guidelines

### Test Style Guidelines
- Use async/await for async tests
- Follow AAA pattern (Arrange, Act, Assert)
- Use descriptive test names
- Add docstrings explaining test purpose

### Mocking Strategy
- Use pytest-mock for function/method mocking
- Create filesystem mocks using tmp_path
- Mock external APIs and file operations

### Coverage Goals
- Aim for 80% coverage initially
- Focus on critical paths
- Include error cases

### Resource Management
- Use small test files
- Clean up temporary files
- Mock large operations

## Progress Log
2024-01-03: Initial plan created
2024-01-03: Created basic test directory structure and initial test files
2024-01-03: Set up conftest.py with basic fixtures and mock filesystem support
2024-01-03: Created placeholder integration and core unit test files
2024-01-03: Created all remaining test files with placeholder classes
2024-01-03: Set up pytest.ini and verified all placeholder tests pass
2024-01-04: Implemented core functionality tests in test_core.py
2024-01-04: Implemented configuration tests in test_config_manager.py
2024-01-04: Implemented most path utility tests in test_utils_path.py
2024-01-04: Fixed all issues with filename sanitization tests

## Next Actions
1. Begin implementing handler tests in test_handlers.py
2. Create test resource files needed for handler tests
3. Set up mock test files for handler testing 