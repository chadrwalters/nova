~~~~~
# Title: Introduce New Markdown Aggregation Phase (MARKDOWN_AGGREGATE)

## Steps Overview
1. Create Feature Branch (e.g., feature/markdown-aggregate)
2. Update Config to Reference "markdown_aggregate" Directory
3. Implement and Test _run_markdown_aggregate_phase
4. Invoke New Phase in Pipeline process() After MARKDOWN_CONSOLIDATE

## Detailed Tasks

### 1. Create Feature Branch
- Status: DONE
- Description:  
  - From the main or dev branch, create a new branch feature/markdown-aggregate.  
  - Ensure the first commit logs the intent of adding a new aggregation phase.

### 2. Update Config
- Status: DONE
- Description:  
  - In environment/config files, add markdown_aggregate references (e.g., paths.phase_dirs['markdown_aggregate']).
  - Ensure the directory is created with necessary permissions.

### 3. Implement _run_markdown_aggregate_phase
- Status: DONE
- Description:
  - Inside src/nova/core/pipeline.py, add the method below to merge all .md files from the markdown_consolidate phase into a single file:
  
    def _run_markdown_aggregate_phase(self) -> None:
        """
        Run the markdown aggregate phase, merging all consolidated markdown files
        into a single markdown file.
        """
        input_dir = Path(self.config.paths.phase_dirs['markdown_consolidate'])
        output_dir = Path(self.config.paths.phase_dirs['markdown_aggregate'])
        state_dir = Path(self.config.paths.state_dir) / 'markdown_aggregate'

        # Create phase directories
        output_dir.mkdir(parents=True, exist_ok=True)
        state_dir.mkdir(parents=True, exist_ok=True)

        try:
            # Gather all markdown files
            input_files = []
            for ext in self.config.processors['markdown'].extensions:
                input_files.extend(input_dir.glob(f'**/*{ext}'))

            if not input_files:
                warning("No markdown files found for aggregation")
                return

            # Single output file
            merged_output_path = output_dir / "all_merged_markdown.md"

            with merged_output_path.open("w", encoding="utf-8") as merged_output:
                # Optional: intro header
                merged_output.write("# Aggregated Markdown Files\n\n")

                for md_file in input_files:
                    try:
                        rel_path = md_file.relative_to(input_dir)
                        with md_file.open("r", encoding="utf-8") as f:
                            file_content = f.read()

                        merged_output.write("\n\n---\n\n")
                        merged_output.write(f"## Start of file: {rel_path}\n\n")
                        merged_output.write(file_content)
                        merged_output.write(f"\n\n## End of file: {rel_path}\n")

                        self.state.update_file_state(
                            phase='markdown_aggregate',
                            file_path=str(rel_path),
                            status='completed'
                        )
                    except Exception as e:
                        error(f"Failed to merge {md_file}: {e}")
                        self.state.update_file_state(
                            phase='markdown_aggregate',
                            file_path=str(md_file),
                            status='failed',
                            error=str(e)
                        )

            success(f"All markdown files merged into {merged_output_path}")

        except Exception as e:
            error(f"Failed to run markdown aggregate phase: {e}")
            self.state.update_file_state(
                phase='markdown_aggregate',
                file_path='aggregate',
                status='failed',
                error=str(e)
            )

### 4. Invoke New Phase in Pipeline
- Status: DONE
- Description:
  - In the process() method (src/nova/core/pipeline.py), after the call to _run_markdown_consolidate_phase, invoke _run_markdown_aggregate_phase:

    def process(self) -> None:
        try:
            info("Starting pipeline processing...")
            # Phase 1: MARKDOWN_PARSE
            if self.config.processors['markdown'].enabled:
                info("Starting MARKDOWN_PARSE phase...")
                self._run_markdown_parse_phase()

            # Phase 2: MARKDOWN_CONSOLIDATE
            if self.config.processors['markdown'].enabled:
                info("Starting MARKDOWN_CONSOLIDATE phase...")
                self._run_markdown_consolidate_phase()

            # Phase 3: MARKDOWN_AGGREGATE
            if self.config.processors['markdown'].enabled:
                info("Starting MARKDOWN_AGGREGATE phase...")
                self._run_markdown_aggregate_phase()

            success("Pipeline processing complete")
        except Exception as e:
            error(f"Pipeline processing failed: {e}")
            raise ProcessingError(f"Pipeline processing failed: {str(e)}") from e

## Progress
- Tasks: 4/4 Done
~~~~~