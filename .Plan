# Nova Code Quality Improvement Plan

## Goal
Implement a comprehensive but practical pre-commit filter system that:
1. Enforces code quality standards
2. Maintains consistent style
3. Catches common errors early
4. Doesn't impede development workflow
5. Works seamlessly with Cursor.ai

## Phase 1: Basic Linting and Formatting (COMPLETED)
- ✓ Configured black for code formatting
- ✓ Added isort for import organization
- ✓ Implemented flake8 for basic linting
- ✓ Added bandit for security checks
- ✓ Set up commitizen for commit message standards

✓ Phase Validation:
- Tests: poetry run pytest (PASSED)
- Pipeline: ./cleanup.sh -a && ./process_notes.sh (PASSED)

## Phase 2: Type Checking Implementation (IN PROGRESS)
Current Status: Mypy configured but with loose settings

### Next Steps
1. [ ] Gradually tighten mypy settings:
   For each setting change:
   a) Run pre-commit check to identify affected files:
      ```bash
      poetry run pre-commit run mypy --all-files
      ```
   b) Fix identified type issues
   c) Run tests to verify fixes
   d) Run pipeline to ensure functionality
   e) Update .pre-commit-config.yaml with new setting
   f) Final validation with tests and pipeline

   Settings to update:
   - [✓] Remove --allow-untyped-defs
     Files fixed:
     - [✓] src/nova/validation/pipeline_validator.py
     - [✓] src/nova/core/reference_manager.py
     - [✓] src/nova/core/markdown/writer.py
     - [✓] src/nova/processor/markdown_processor.py
     - [✓] src/nova/config/logging.py
     - [✓] src/nova/ui/navigation.py
     - [✓] scripts/measure_imports.py
     - [✓] src/nova/handlers/markdown.py
     - [✓] src/nova/core/metrics.py
     - [✓] src/nova/phases/parse.py
     - [✓] src/nova/phases/finalize.py
     - [✓] src/nova/phases/disassemble.py

   - [ ] Remove --allow-untyped-decorators
   - [ ] Enable --strict-optional
   - [ ] Add error codes to ignore list instead of blanket allows

2. [ ] Update type hints in core modules:
   - [ ] phases/*.py
   - [ ] handlers/*.py
   - [ ] utils/*.py
   - [ ] models/*.py
   Validation: poetry run pytest

3. [ ] Create type stubs for missing libraries
   Validation: poetry run pytest

Phase Validation:
- Tests: poetry run pytest
- Pipeline: ./cleanup.sh -a && ./process_notes.sh

## Phase 3: Test Coverage Enhancement
1. [ ] Add pre-commit hook for test coverage
   - [ ] Configure pytest-cov
   - [ ] Set minimum coverage threshold
   - [ ] Exclude appropriate paths
   Validation: poetry run pytest

2. [ ] Implement test-specific checks:
   - [ ] pytest-randomly for test order independence
   - [ ] pytest-deadfixtures for unused fixtures
   - [ ] pytest-mock for proper mock usage
   Validation: poetry run pytest

Phase Validation:
- Tests: poetry run pytest
- Pipeline: ./cleanup.sh -a && ./process_notes.sh

## Phase 4: Documentation Standards
1. [ ] Add docstring checks:
   - [ ] pydocstyle configuration
   - [ ] Custom rules for Nova's documentation style
   - [ ] Integration with existing hooks
   Validation: poetry run pytest

2. [ ] Implement documentation coverage:
   - [ ] Set up interrogate
   - [ ] Configure minimum doc coverage
   - [ ] Add to pre-commit hooks
   Validation: poetry run pytest

Phase Validation:
- Tests: poetry run pytest
- Pipeline: ./cleanup.sh -a && ./process_notes.sh

## Phase 5: Performance and Complexity
1. [ ] Add complexity checks:
   - [ ] Configure radon
   - [ ] Set maximum complexity thresholds
   - [ ] Add to pre-commit hooks
   Validation: poetry run pytest

2. [ ] Implement performance checks:
   - [ ] Add scalene for performance profiling
   - [ ] Set performance budgets
   - [ ] Configure CI integration
   Validation: poetry run pytest

Phase Validation:
- Tests: poetry run pytest
- Pipeline: ./cleanup.sh -a && ./process_notes.sh

## Current Ignore Patterns
- tests/
- docs/
- examples/

## Planned Ignore Updates
1. [ ] Refine test directory exclusions:
   - [ ] Include test_*.py files in type checking
   - [ ] Apply documentation standards to test files
   - [ ] Keep formatting rules relaxed for test data
   Validation: poetry run pytest

2. [ ] Documentation directory handling:
   - [ ] Apply markdown linting to docs/
   - [ ] Include API documentation checks
   - [ ] Exclude generated documentation
   Validation: poetry run pytest

3. [ ] Example code management:
   - [ ] Apply basic formatting
   - [ ] Skip complex checks
   - [ ] Ensure examples are typed
   Validation: poetry run pytest

Phase Validation:
- Tests: poetry run pytest
- Pipeline: ./cleanup.sh -a && ./process_notes.sh

## Success Criteria
1. All hooks pass on clean codebase
2. CI pipeline matches local checks
3. Developer workflow remains smooth
4. Cursor.ai integration works seamlessly
5. Documentation stays current
6. Test coverage maintains high standards

## Validation Process
1. For each new hook or rule change:
   - Run on isolated branch
   - Measure performance impact
   - Document false positives
   - Update ignore patterns
   - Test with Cursor.ai
   - Roll out to team
   Validation: poetry run pytest

2. For each phase completion:
   - Full codebase validation
   - CI pipeline verification
   - Developer feedback review
   - Documentation update
   - Performance impact assessment
   Final Validation:
   - Tests: poetry run pytest
   - Pipeline: ./cleanup.sh -a && ./process_notes.sh 