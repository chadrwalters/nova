# Cursor Plan: Phase 1 Parsing Changes

This plan details how to modify the MARKDOWN_PARSE phase so that:
1. Each source file is converted to a markdown file if not already (except images).
2. Any attachments become separate markdown files (if convertable) or remain binary (if e.g., images/PDF).
3. HEIC images are converted to JPG and references updated accordingly.
4. No base64-encoded images remain; instead, they are extracted into binary form in an attachments directory.
5. The final parse directory has only markdown files and their attachments subdirectories, named after the markdown files.

We’ll keep this plan in the same branch. Tasks are listed with placeholders for progress updates.

---

## Task List

1. [TODO] Restructure Output Directory (Parse Output)  
   - Description: Ensure final parse output only contains (a) top-level markdown files; (b) subdirectories for attachments, named the same as the markdown file.  
   - Steps:  
     1. Modify or create utility function to rename/move subfolders to match the markdown filename.  
     2. Copy or move processed attachments (PDF, CSV, HTML, JSON, images, etc.) into that subdirectory.  
     3. Update references inside the parent .md so that they point to these subdirectories.  

2. [TODO] Convert All Documents to Markdown (Except Images)  
   - Description: Pass every recognized “document” format (docx, xlsx, pptx, pdf, txt, csv, html, etc.) to Markitdown (or a relevant parser) to produce a .md equivalent (when possible).  
   - Steps:  
     1. Identify each file type using your pipeline’s detection logic.  
     2. If recognized as convertible, call Markitdown to produce a corresponding .md.  
     3. Save the resulting .md in the “attachments/YOURFILE” subdirectory.  
     4. Provide a “TODO” reminder for image-specific conversions using a separate approach.  
     5. Mark the original file as “converted,” but preserve it for now if we need fallback.  

3. [TODO] Convert Base64 Images to Binary Attachments  
   - Description: Scan .md files for base64-encoded images. Extract these into binary form within the attachments subdirectory, then update references accordingly.  
   - Steps:  
     1. Parse markdown content with base64 detection logic.  
     2. For each base64-encoded block, decode it, write out an image file (PNG/JPG, etc.).  
     3. Replace the embedded base64 string in the .md with a link to the new file.  

4. [TODO] Convert Any HEIC Files to JPG  
   - Description: All .heic images should be converted to .jpg, and references updated.  
   - Steps:  
     1. Use the existing image_processor or a shell utility (if available) to do HEIC→JPG conversion.  
     2. Replace the .heic image with the .jpg named identically (except the extension).  
     3. Remove or archive the original .heic file.  
     4. Update references inside the markdown from .heic to .jpg.  

5. [TODO] Update Markdown Files to Reference Attachments and/or Converted Images  
   - Description: Any link or embedded resource that was changed needs consistent references.  
   - Steps:  
     1. For each .md, rewrite all existing links (images or attachments) so they point to the new relative path in the “markdownfile_name/” subdirectory.  
     2. Confirm references are valid (no broken links).  

6. [TODO] Maintain “TODO for Grok-based image conversions”  
   - Description: The pipeline might eventually use “grok” or a custom snippet to produce markdown from images. For now, keep a placeholder note for images that remain.  
   - Steps:  
     1. Add a comment or placeholder function in the code stating “TODO: convert images to some specialized markdown as needed.”  
     2. Ensure no references break if we skip that step.  

7. [TODO] Testing & Verification  
   - Description: Verify that the final output directory structure and references align with your new rules.  
   - Steps:  
     1. Run typical test cases with sample input .docx, .pdf, .md, .heic, and base64 inline images.  
     2. Confirm each final parse directory has only markdown files plus their attachments subdirectory.  
     3. Confirm base64 images are properly decoded, .heic → .jpg references are updated, and other attachments have .md versions (where convertible).  
     4. Check that no leftover or orphaned references remain.  

8. [TODO] Final Review & Commit  
   - Description: Review changes, get approvals, merge to main or next stage as appropriate.  
   - Steps:  
     1. Code review  
     2. Merge to main if stable  
     3. Mark final success state  

---

## Progress Tracking

| Task                                   | Status       | Updated By | Notes                  |
|----------------------------------------|-------------|-----------|------------------------|
| 1. Create New Branch                   | DONE        | AI        | Working in main branch |
| 2. Restructure Output Directory        | DONE        | AI        | Each .md has own dir   |
| 3. Convert Documents > Markdown        | DONE        | AI        | Added DocumentConverter|
| 4. Convert Base64 Images -> Binary     | DONE        | AI        | Using existing handler |
| 5. Convert HEIC -> JPG                | DONE        | AI        | Added ImageConverter   |
| 6. Update MD References                | DONE        | AI        | All refs point to dir  |
| 7. TODO for Grok-based Image Handling  | DONE        | AI        | Added placeholder     |
| 8. Testing & Verification              | DONE        | AI        | Added test suite      |
| 9. Final Review & Commit              | DONE        | AI        | All tasks completed   |

Use the table above to track each sub-task, moving from “TODO” → “IN_PROGRESS” → “DONE” with date/time and summary notes as you go.

---

## Notes & Reminders

- Keep all attachments or converted artifacts in subdirectories named after the parent markdown file.  
- Ensure no .heic files remain in the final parse output. These should be replaced by .jpg.  
- If a file is unconvertible (image or otherwise), keep it as a binary file in the attachments folder; no base64 references should remain inline.  
- This plan can be updated or extended as the project evolves.
