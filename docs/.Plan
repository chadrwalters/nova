# Nova System Implementation Plan
Version: 1.1
Last Updated: 2024-12-28
Status: IN_PROGRESS

## Context Collection
[✓] Initial PRD analyzed
[✓] Development environment verified
[✓] Dependencies confirmed
[✓] Directory structure validated

## Key Data
base_dir: "/Users/ChadWalters/Library/Mobile Documents/com~apple~CloudDocs"
markitdown_version: "0.1.0"
python_version: "3.11.7+"
required_phases: ["parse", "split"]

## Implementation Status
Current Phase: PIPELINE_OPERATIONALIZATION
Progress: 85%

## Key Changes and Findings
1. [2024-12-28] Disabled Image Recognition
   - Temporarily disabled Vision API integration
   - Created placeholder markdown files for images
   - Maintained HEIC to JPEG conversion
   - Added TODO notes in image markdown files
   - Simplified image handler to focus on core functionality

2. [2024-12-28] JSON Serialization Updates
   - Added custom JSON encoder for bytes objects
   - Enhanced metadata serialization
   - Fixed serialization of Path and datetime objects
   - Improved error handling in serialization

3. [2024-12-28] Pipeline Improvements
   - Successfully implemented file processing pipeline
   - Added proper phase sequencing
   - Enhanced error handling and reporting
   - Improved metadata tracking
   - Added category support in split phase

4. [2024-12-28] Configuration Management
   - Switched from .env to YAML configuration
   - Enhanced configuration validation
   - Added support for environment variable expansion
   - Improved configuration inheritance

5. [2024-12-28] CSV and Image Processing Limitations
   - Added fallback handling for CSV encoding issues
   - CSV files with unknown encodings generate warning markdown
   - Temporarily disabled Vision API integration
   - Created placeholder markdown files for images
   - Maintained HEIC to JPEG conversion

6. [2024-12-28] Markdown Processing Improvements
   - Enhanced markdown file processing
   - Added proper attachment handling
   - Maintained directory structure
   - Updated link processing
   - Added metadata tracking for files

7. [2024-01-11] Successful Image Handler Implementation ✨
   - Implemented working image handler with gpt-4o model
   - Added robust error handling for API interactions
   - Successfully integrated HEIC conversion
   - Implemented proper async/await patterns
   - Added comprehensive logging
   - Verified working with production data
   - Key features:
     * Reliable vision API integration
     * Proper temporary file cleanup
     * Memory-efficient base64 handling
     * Graceful fallbacks for API issues
     * Clear separation of concerns
     * Secure API key management

## Phase Tracking

### 1. Architecture Design [COMPLETED]
- [✓] Document system architecture
  - [✓] Create architecture.md with system overview
  - [✓] Define component interactions
  - [✓] Document data flow between phases
  - [✓] Specify interfaces and contracts
  - [✓] Define handler extension architecture
  - [✓] Document format-specific rules
  - [✓] Define metadata schema
  - [✓] Specify caching strategy
  - [✓] Document link structure
  - [✓] Implement and test caching system
  - [✓] Implement and test Vision API integration
  - [✓] Implement image handler with caching
  - [✓] Complete remaining handler implementations
    - [✓] Document handler (PDF, PPTX, DOCX, XLSX)
    - [✓] Audio handler
    - [✓] Archive handler
    - [✓] Text handler
- [✓] Define technology stack
  - [✓] Document core dependencies
  - [✓] Specify version requirements
  - [✓] Document integration points
  - [✓] Define image processing requirements
- [ ] Create pipeline documentation
  - [✓] Document phase specifications
  - [✓] Define phase interfaces
  - [✓] Document error handling strategy
  - [✓] Specify image processing workflow
  - [✓] Detail handler extension pattern
  - [✓] Define conversion templates
  - [✓] Specify caching behavior
  - [✓] Implement and test caching behavior
- [✓] Design review and validation
  - [✓] Review architecture with stakeholders
  - [✓] Validate technical decisions
  - [✓] Document potential risks

### 2. Project Setup [COMPLETED]
- [✓] PRD analysis complete
- [✓] Create project structure
- [✓] Setup configuration management
- [✓] Initialize dependency management
- [✓] Create basic pipeline structure
  - [✓] Implement NovaPipeline class
  - [✓] Create phase interface
  - [✓] Implement parse phase
  - [✓] Implement split phase
  - [✓] Create metadata model
- [ ] Implement core functionality
  - [✓] Add error handling
    - [✓] Custom exception hierarchy
    - [✓] Context-aware error wrapping
    - [✓] Error propagation
    - [✓] Detailed error reporting
  - [✓] Add logging system
    - [✓] Custom formatter
    - [✓] Structured output
    - [✓] File and console logging
    - [✓] Debug mode support
  - [✓] Add progress tracking
    - [✓] File-level tracking
    - [✓] Phase-level tracking
    - [✓] Status updates
    - [✓] Duration tracking
  - [✓] Add performance monitoring
    - [✓] Operation timing tracking
    - [✓] Per-format timing metrics
    - [✓] Handler operation profiling
    - [✓] Timing statistics collection

### 3. Pipeline Operationalization [IN_PROGRESS]
- [✓] Simplify script structure
  - [✓] Remove setup_structure.sh (move to parse phase)
  - [✓] Remove consolidate.sh (move to split phase)
  - [✓] Update run_nova.sh to be single entry point
  - [✓] Update cleanup.sh
    - [✓] Add cache cleanup
    - [✓] Add temporary file cleanup
    - [✓] Add output directory cleanup
    - [✓] Handle interrupted runs
    - [✓] Preserve original files option
- [✓] Process real input data
  - [✓] Process _NovaInput directory contents
  - [✓] Generate correct output structure
  - [✓] Validate output quality
  - [✓] Monitor performance metrics    
- [ ] Fix parse phase implementation
- [ ] Enhance split phase
- [ ] Test end-to-end workflow
  - [ ] Test with sample documents
  - [ ] Test with real input data
  - [ ] Validate output structure
  - [ ] Check performance metrics
- [ ] Document workflow
  - [ ] Update README with new structure
  - [ ] Add usage examples
  - [ ] Add troubleshooting guide

### 4. Testing Implementation [NOT_STARTED]
- [ ] Create test suite
  - [ ] Add unit tests
  - [ ] Add integration tests
  - [ ] Add performance tests
- [ ] Add test data
  - [ ] Sample documents
  - [ ] Edge cases
  - [ ] Performance test cases
- [ ] Setup test automation
  - [ ] Add test runner script
  - [ ] Add test reporting
  - [ ] Add quality checks

### 5. Testing & Validation [NOT_STARTED]
- [ ] Create test data set
- [ ] Implement integration tests
- [ ] Validate metadata schema
- [ ] Verify console output formatting
- [ ] Performance testing

### 6. Documentation [IN_PROGRESS]
- [✓] Create API documentation
- [✓] Create usage documentation
- [✓] Create configuration guide
- [ ] Create troubleshooting guide

## Completed Items Log
1. [2024-01-09] Initial PRD analysis complete
   - Identified key requirements
   - Documented metadata schema
   - Mapped phase dependencies
2. [2024-01-09] Added Architecture Design phase
   - Updated phase tracking
   - Added detailed architecture tasks
   - Adjusted project timeline
3. [2024-01-09] Created initial architecture documentation
   - Created comprehensive architecture.md
   - Defined system components and data flow
   - Documented technology stack and dependencies
   - Added implementation guidelines
   - Specified error handling strategy
4. [2024-01-09] Architecture updates
   - Updated Python version requirement to 3.11.7+
   - Refined directory structure and data flow
   - Simplified testing approach (removed coverage requirements)
   - Enhanced document processing flow documentation
5. [2024-01-09] Created pipeline specification
   - Detailed phase-by-phase documentation
   - Defined metadata schema
   - Specified phase interfaces
   - Documented error handling and recovery
   - Added configuration specifications
6. [2024-01-09] Added HEIC and Vision API processing
   - Defined HEIC to JPEG conversion workflow
   - Added Vision API integration specifications
   - Updated metadata schema for image processing
   - Added caching strategy for API responses
   - Specified system dependencies for image handling
7. [2024-01-09] Enhanced image processing specifications
   - Added smart image type detection
   - Defined context-aware markdown templates
   - Added OCR integration for text screenshots
   - Enhanced metadata schema for image context
   - Specified vision API prompt templates
8. [2024-01-09] Integrated markitdown's full capabilities
   - Added support for multiple document formats
   - Incorporated audio file handling
   - Extended image processing capabilities
   - Updated configuration structure
   - Streamlined handler architecture
9. [2024-01-09] Specified handler extension architecture
   - Created class hierarchy diagram
   - Defined extension patterns
   - Documented handler lifecycle
   - Added configuration templates
   - Specified error handling approach
   - Created example implementations
10. [2024-01-09] Added format-specific conversion rules
    - Defined rules for all supported formats
    - Created markdown templates
    - Specified detection criteria
    - Documented processing steps
    - Added conversion priorities
    - Defined accessibility requirements
11. [2024-01-09] Enhanced metadata and caching
    - Added file-level metadata tracking
    - Implemented caching strategy
    - Enhanced link structure
    - Added attachment templates
    - Defined cache validation rules
    - Specified cache management
12. [2024-01-10] Implemented caching system
    - Added TTL-based cache expiration
    - Implemented file modification-based invalidation
    - Added size-based cache cleanup
    - Implemented cache persistence
    - Added comprehensive test suite
13. [2024-01-10] Implemented Vision API integration
    - Added OpenAI Vision API support
    - Implemented API response caching
    - Added error handling and fallback
    - Created test suite with mocked responses
14. [2024-01-10] Enhanced image handler
    - Added HEIC conversion support
    - Implemented Vision API integration
    - Added caching support
    - Created test suite for handler functionality
15. [2024-01-10] Implemented document handler
    - Added support for PDF documents
    - Added support for PPTX presentations
    - Added support for DOCX documents
    - Added support for XLSX spreadsheets
    - Implemented text extraction
    - Added image extraction from PDFs
    - Added metadata tracking
    - Integrated with base handler architecture
16. [2024-01-10] Implemented audio handler
    - Added support for multiple audio formats
    - Implemented metadata extraction with mutagen
    - Added Whisper integration for transcription
    - Added language detection
    - Implemented timestamp formatting
    - Added error handling and warnings
    - Integrated with base handler architecture
17. [2024-12-28] Disabled Image Recognition
    - Temporarily disabled Vision API integration
    - Created placeholder markdown files for images
    - Maintained HEIC to JPEG conversion
    - Added TODO notes in image markdown files
    - Simplified image handler to focus on core functionality
18. [2024-12-28] Enhanced Pipeline Functionality
    - Implemented successful file processing
    - Added proper phase sequencing
    - Enhanced error handling and reporting
    - Improved metadata tracking
    - Added category support in split phase
    - Fixed JSON serialization issues
19. [2024-12-28] Configuration Updates
    - Switched from .env to YAML configuration
    - Enhanced configuration validation
    - Added support for environment variable expansion
    - Improved configuration inheritance
    - Updated installation scripts
20. [2024-12-28] CSV and Image Processing Limitations
    - Added fallback handling for CSV encoding issues
    - CSV files with unknown encodings generate warning markdown
    - Temporarily disabled Vision API integration
    - Created placeholder markdown files for images
    - Maintained HEIC to JPEG conversion
21. [2024-01-11] Implemented Working Image Handler
    - Successfully integrated OpenAI Vision API with gpt-4o model
    - Implemented robust error handling
    - Added HEIC conversion support
    - Verified working implementation
    - Documented in architecture.md
    - Added comprehensive logging
    - Implemented proper async patterns
    - Added secure API key handling
    - Verified memory efficiency
    - Added proper cleanup procedures

## Remaining Tasks
1. Implement consolidate.sh script
2. Complete testing implementation
3. Add comprehensive test suite
4. Create troubleshooting guide
5. Implement Vision API integration (when ready)
6. Add audio transcription support
7. Enhance category extraction in split phase
8. Add performance optimization
9. Implement advanced caching strategies
10. Add support for additional file formats

## Technical Decisions
1. Using YAML for configuration (rationale: better structure and validation)
2. Using markitdown v0.0.1a3 for Markdown processing
3. Metadata stored in JSON format for flexibility and readability
4. Documentation-first approach for architecture phase
5. Python 3.11.7+ as base runtime environment (updated from 3.9+)
6. Poetry for dependency management
7. Mermaid for architecture diagrams
8. Pytest for testing framework (without coverage requirements)
9. Simplified documentation structure (removed API docs section)
10. Metadata schema defined in JSON format with specific structure
11. Phase interfaces defined with clear input/output contracts
12. State management approach using file-based tracking
13. HEIC conversion using libheif and ImageMagick
14. Vision API with OpenAI primary, xAI fallback
15. Image processing results caching for efficiency
16. Base64 HEIC detection and conversion support
17. Context-aware image processing with type detection
18. Template-based markdown generation for different image types
19. OCR integration for text-heavy images
20. Custom vision API prompts per image type
21. Leverage markitdown's built-in format converters
22. Extend markitdown's image handler for HEIC
23. Add audio file processing capabilities
24. Unified handler architecture based on markitdown
25. Handler extension pattern using inheritance
26. Pre/post processing hooks for enhanced handlers
27. Unified configuration structure for handlers
28. Type-safe handler interfaces with dataclasses
29. Format-specific markdown templates
30. Content type detection rules
31. Accessibility-first conversion approach
32. Structured metadata for all formats
33. File-level metadata tracking with timestamps
34. Cache invalidation based on file hashes
35. Bidirectional link structure with anchors
36. Pydantic for metadata schema validation
37. Cache implementation using file-based storage with TTL
38. Vision API response caching with size limits
39. File modification-based cache invalidation
40. Automated cache cleanup based on size limits
41. Using PyMuPDF for PDF processing
42. Using python-docx for DOCX processing
43. Using python-pptx for PPTX processing
44. Using openpyxl for XLSX processing
45. Markdown table format for spreadsheet data
46. Using mutagen for audio metadata extraction
47. Using OpenAI Whisper for audio transcription
48. Base Whisper model for faster processing
49. Timestamp formatting in HH:MM:SS format
50. Language auto-detection for transcription
51. Using zipfile for archive extraction
52. Temporary directory for safe extraction
53. Recursive file processing in archives
54. Consolidated markdown summary for archives
55. CSV to markdown table conversion
56. JSON structure analysis with type info
57. XML hierarchy visualization
58. HTML cleaning and structure preservation
59. Asynchronous pipeline processing
60. Phase-based document processing
61. Metadata persistence in JSON
62. Content categorization by type
63. Index file generation per category
64. Custom exception hierarchy for error handling
65. Context-aware error wrapping
66. Structured logging with JSON extras
67. Thread-safe progress tracking
68. Async-compatible status updates
69. Operation-level timing metrics
70. Async-compatible timing decorator
71. Thread-safe metrics collection
72. Per-format performance tracking
73. Shell scripts for workflow automation
74. Progress reporting in support scripts
75. End-to-end testing with real data
76. Performance monitoring in scripts
77. CSV encoding fallback with warning markdown
78. Chardet for encoding detection attempts
79. Graceful degradation for unprocessable files
80. Markdown file structure preservation
81. Attachment directory organization
82. Link path normalization
83. Metadata tracking for processed files
84. Using gpt-4o model for Vision API (verified working implementation)

## Known Dependencies
1. markitdown==0.0.1a3
2. Python >= 3.11.7
3. Poetry
4. pytest (for testing, no coverage tracking)
5. pillow>=10.1.0
6. pyheif>=0.7.1
7. openai>=1.3.5
8. xai-client>=1.0.0
9. PyYAML for configuration handling
10. JSON schema validator (TBD)
11. ImageMagick 6.x (system)
12. libheif (system)
13. tesseract-ocr>=5.3.0 (system)
14. pytesseract>=0.3.10
15. opencv-python>=4.8.0 (for image classification)
16. numpy>=1.24.0 (for image processing)
17. ffmpeg (system, for audio processing)
18. whisper>=1.0.0 (for audio transcription)
19. typing-extensions>=4.7.0 (for enhanced type hints)
20. dataclasses-json>=0.5.7 (for result serialization)
21. python-magic>=0.4.27 (for format detection)
22. beautifulsoup4>=4.12.0 (for HTML processing)
23. python-docx>=0.8.11 (for Word processing)
24. python-pptx>=0.6.21 (for PowerPoint processing)
25. openpyxl>=3.1.2 (for Excel processing)
26. pydantic>=2.5.0 (for schema validation)
27. python-dateutil>=2.8.2 (for timestamp handling)
28. xxhash>=3.4.1 (for fast file hashing)

## Notes for LLMs
- This plan is continuously updated as implementation progresses
- Check "Implementation Status" for current phase
- "Key Data" section contains critical configuration values
- "Next Actions" lists immediate priorities
- All metadata schemas are documented in PRD

## Risk Register
1. Markdown parsing edge cases need thorough testing
2. Attachment handling might require additional libraries
3. Performance considerations for large documents
4. Architecture decisions may impact future extensibility
5. Integration between phases needs careful design
6. Memory usage for large documents needs optimization
7. Security considerations for file system operations
8. Plugin system complexity might affect maintenance
9. Document conversion reliability for various formats
10. Metadata consistency across processing phases
11. State management complexity between phases
12. Configuration validation requirements
13. Error recovery procedures need careful implementation
14. Vision API rate limits and costs
15. HEIC conversion quality and performance
16. Cache storage growth management
17. Vision API fallback reliability
18. OCR accuracy for complex screenshots
19. Image type classification reliability
20. Context preservation in markdown conversion
21. Processing time for complex image analysis
22. Template maintenance and versioning
23. Audio transcription accuracy
24. Format conversion fidelity
25. Handler extension complexity
26. Audio processing performance
27. Handler extension compatibility maintenance
28. Type safety across handler chain
29. Configuration complexity management
30. Handler performance overhead
31. Format detection accuracy
32. Template maintenance complexity
33. Processing time for complex formats
34. Memory usage for large archives
35. Format conversion fidelity
36. Cache storage growth
37. Cache invalidation complexity
38. Link integrity maintenance
39. Metadata schema evolution
40. Cache cleanup performance
41. Cache performance under heavy load
42. Vision API response caching efficiency
43. Cache cleanup impact on system performance
44. Cache persistence reliability
45. Delayed testing might make issues harder to find
46. Integration complexity without early tests
47. Potential rework if design issues found late
48. Documentation drift during rapid development
49. PDF image extraction may be memory intensive
50. Complex document formatting might be lost
51. Large spreadsheets may need pagination
52. PowerPoint animations not preserved
53. Audio transcription accuracy varies by quality
54. Large audio files may be slow to process
55. Memory usage during transcription
56. Language detection reliability
57. Large archives may consume significant disk space
58. Nested archives could cause deep recursion
59. Mixed file types in archives need careful handling
60. Temporary file cleanup reliability
61. CSV parsing for complex data structures
62. JSON structure analysis performance
63. XML namespace handling
64. HTML structure preservation accuracy
65. Pipeline error propagation
66. Concurrent processing limits
67. Memory usage during batch processing
68. Metadata consistency across phases
69. Error context size in large pipelines
70. Log file growth management
71. Progress tracking memory usage
72. Status update performance impact
73. Timing overhead in performance metrics
74. Metrics collection memory usage
75. Timing accuracy in async operations
76. Metrics aggregation performance
77. Real data edge cases
78. Script portability across systems
79. Performance with large input directories
80. Error handling in shell scripts
81. Markdown link processing reliability
82. Attachment path resolution
83. Directory structure preservation
84. Link integrity in processed files 