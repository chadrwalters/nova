# Nova Document Processor Pipeline Rules

## Plan Management
- Use and check .Plan at the start of each interaction
- Update .Plan after each step with:
  - Progress status
  - Completion timestamps
  - Findings or dependencies
  - Updated risk register
  - Next action items
- Keep .Plan accurate so a new LLM can continue without re-reading the entire plan

## Plan Updates
- Maintain clear status markers: [TODO/IN_PROGRESS/DONE]
- Keep precise progress percentage
- Include a chronological log of completed items
- Update technical decisions
- Track current phase
- Keep .Plan clean and readable

## Before New Work
- Verify current phase in .Plan
- Check dependencies
- Confirm next action items
- Update implementation status

## Milestone Completion Requirements
1. Execute cleanup.sh -a && run_nova.sh
2. Review console output for errors/warnings
3. Document any issues
4. Fix all issues
5. Update .Plan with milestone completion

## After Work Completion
- Mark tasks complete
- Document issues
- Update next actions
- Recalculate progress
- Verify milestone requirements

## Package Management
- Use Poetry for dependencies
- Do not use pip
- Add or remove packages only through Poetry

## Clean Run Instructions
- For a clean run: ./cleanup.sh -a && ./run_nova.sh

## Logging Configuration
- Control logging with NOVA_LOG_LEVEL
- Allowed levels: ERROR, WARNING, INFO, DEBUG
- Do not modify nova.yaml or code for logging
- Consistent logging via environment variables

## Simplicity Over Cleverness
- Write immediately understandable code
- Avoid premature optimization
- Optimize for readability first

## Focus on Core Functionality
- Start minimal
- Build incrementally
- Remove unnecessary code

## Leverage Existing Solutions
- Use standard libraries or well-maintained popular libraries
- Keep dependencies practical

## Function Design
- One responsibility per function
- Keep functions short
- Avoid many parameters
- Use descriptive names

## Project Structure
- Group related code together
- Use consistent file organization
- Avoid deep nesting

## Code Review Guidelines
- Review for simplicity
- Question complexity
- Remove duplicates
- Keep style consistent

## Maintenance
- Remove unused code
- Keep dependencies updated
- Refactor unclear code
- Document what matters

## Object-Oriented Principles
- Single Responsibility
- Encapsulation
- Clear constructor initialization
- Favor composition over inheritance
- Make dependencies explicit
- Use type hints & interface contracts
- Methods should be short and focused

## Testing
- Test public interfaces
- Use meaningful test names
- Keep tests isolated
- Test edge cases

## Common Anti-Patterns
- God classes doing too much
- Feature envy
- Long parameter lists
- Tight coupling
- Premature optimization