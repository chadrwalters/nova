# Nova Document Processor Pipeline Rules

## Plan Management
- When doing work off a .Plan file, LLM must check .Plan at the start of each interaction
- LLM must check .Plan at the start of each interaction
- After each step, LLM must update .Plan with:
  - Progress status
  - Completion timestamps
  - New findings or dependencies
  - Updated risk register
  - Next action items
- LLM must remember, the goal of updating the plan is to keep it up to date and accurate such that a new LLM can take over and continue the work without needing to re-read the entire plan.

## Plan Updates
- Plan updates must maintain:
  - Clear status markers [TODO/IN_PROGRESS/DONE]
  - Precise progress percentage
  - Chronological log of completed items
  - Updated technical decisions
  - Current phase tracking
  - Always keep the plan clean and readable.

## Before New Work
- Before starting new work:
  - Verify current phase in .Plan
  - Check dependencies are met
  - Confirm next action items
  - Update implementation status

## Milestone Completion Requirements
- At the end of EVERY milestone:
  1. Execute cleanup.sh -a && run_nova.sh
  2. Review console output for errors/warnings
  3. Document any issues found
  4. Fix ALL issues before moving to next milestone
  5. Update .Plan with milestone completion

## After Work Completion
- After completing work:
  - Mark tasks as complete
  - Document any issues encountered
  - Update next actions
  - Recalculate progress percentage
  - Verify milestone requirements if applicable

## Package Management
- NEVER use pip for package management
- Always use Poetry for dependency management and package installation
- All package additions or removals must be done through Poetry commands

## Clean Run Instructions
- Whenever a clean run is requested, execute: ./cleanup.sh -a && ./run_nova.sh
- This applies to all clean run requests, regardless of context

### Rule: Use Environment Variables for Logging Control

Nova uses environment variables for logging configuration. The primary way to control logging output is through the `NOVA_LOG_LEVEL` environment variable.

**Correct Usage:**
```bash
# Set logging level before running the pipeline
export NOVA_LOG_LEVEL=DEBUG
./run_nova.sh

# Or set it inline
NOVA_LOG_LEVEL=DEBUG ./run_nova.sh
```

**Available Log Levels:**
- `ERROR`: Only show errors
- `WARNING`: Show warnings and errors (default)
- `INFO`: Show informational messages, warnings, and errors
- `DEBUG`: Show all debug information, informational messages, warnings, and errors

**Do Not:**
- Modify logging configuration in `nova.yaml` - it will be ignored
- Try to configure logging through code - use the environment variable
- Mix different logging configuration methods

**Why:**
- Consistent logging control across all components
- Easy to change logging level without modifying code or config files
- Follows the principle of configuration through environment variables
