"""Type stubs for networkx library."""

from typing import Any, Dict, Iterator, List, Optional, Set, Tuple, TypeVar, Union

T = TypeVar("T")

class DiGraph:
    """Directed graph class."""

    def __init__(
        self, incoming_graph_data: Optional[Any] = None, **attr: Any
    ) -> None: ...
    def add_edge(self, u_of_edge: Any, v_of_edge: Any, **attr: Any) -> None: ...
    def add_node(self, node_for_adding: Any, **attr: Any) -> None: ...
    def remove_node(self, n: Any) -> None: ...
    def remove_edge(self, u: Any, v: Any) -> None: ...
    def nodes(self) -> Set[Any]: ...
    def edges(self) -> Set[Tuple[Any, Any]]: ...
    def __contains__(self, n: Any) -> bool: ...
    def __iter__(self) -> Iterator[Any]: ...
    def __len__(self) -> int: ...

def descendants(G: DiGraph, source: Any) -> Set[Any]: ...
def ancestors(G: DiGraph, source: Any) -> Set[Any]: ...
def shortest_path(G: DiGraph, source: Any, target: Any) -> List[Any]: ...
def simple_cycles(G: DiGraph) -> Iterator[List[Any]]: ...
