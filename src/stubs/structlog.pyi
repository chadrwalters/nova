"""Type stubs for structlog library."""
from typing import Any, Callable, Dict, List, Optional, Type, Union

class BoundLogger:
    """Bound logger class."""
    def debug(self, event: str, **kwargs: Any) -> None: ...
    def info(self, event: str, **kwargs: Any) -> None: ...
    def warning(self, event: str, **kwargs: Any) -> None: ...
    def warn(self, event: str, **kwargs: Any) -> None: ...
    def error(self, event: str, **kwargs: Any) -> None: ...
    def critical(self, event: str, **kwargs: Any) -> None: ...
    def exception(self, event: str, **kwargs: Any) -> None: ...
    def log(self, level: str, event: str, **kwargs: Any) -> None: ...
    def msg(self, event: str, **kwargs: Any) -> None: ...
    def bind(self, **new_values: Any) -> "BoundLogger": ...
    def unbind(self, *keys: str) -> "BoundLogger": ...
    def new(self, **new_values: Any) -> "BoundLogger": ...

class ProcessorFormatter:
    """Processor formatter class."""
    def __init__(
        self,
        processor: Callable[..., Any],
        foreign_pre_chain: Optional[List[Callable[..., Any]]] = None,
        keep_exc_info: bool = False,
        keep_stack_info: bool = False,
        **kwargs: Any,
    ) -> None: ...

def get_logger(*args: Any, **kwargs: Any) -> BoundLogger: ...

def wrap_logger(
    logger: Any,
    processors: Optional[List[Callable[..., Any]]] = None,
    wrapper_class: Optional[Type[Any]] = None,
    context_class: Optional[Type[Dict[str, Any]]] = None,
    cache_logger_on_first_use: bool = True,
    **kwargs: Any,
) -> BoundLogger: ... 